(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{530:function(a,t,s){"use strict";s.r(t);var e=s(21),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("blockquote",[s("p",[a._v("摸索着")])]),a._v(" "),s("h2",{attrs:{id:"_1、java-容器都有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-容器都有哪些"}},[a._v("#")]),a._v(" 1、java 容器都有哪些？")]),a._v(" "),s("p",[a._v("Java 容器分为 Collection 和 Map 两大类，Collection集合的子接口有Set、List、Queue三种子接口。我们比较常用的是Set、List，Map接口不是collection的子接口。")]),a._v(" "),s("p",[a._v("Collection集合主要有List和Set两大接口")]),a._v(" "),s("p",[a._v("Map 的常用实现类：HashMap、TreeMap、HashTable、LinkedHashMap、ConcurrentHashMap")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/66ac0908038d45b1a739c9c835b0f072.png",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/724cb00a7ce34cd09d67a35609c53a91.png",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/20210424172014888.png",alt:"img"}})]),a._v(" "),s("h2",{attrs:{id:"_2、collection-和-collections-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、collection-和-collections-有什么区别"}},[a._v("#")]),a._v(" 2、Collection 和 Collections 有什么区别？")]),a._v(" "),s("p",[a._v("java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。")]),a._v(" "),s("p",[a._v("Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。")]),a._v(" "),s("h2",{attrs:{id:"_3、list、set、map-之间的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、list、set、map-之间的区别是什么"}},[a._v("#")]),a._v(" 3、List、Set、Map 之间的区别是什么？")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/56068a29e34750229b3f2527dd172a13.png",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[a._v("List：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重复，可以插入多个null元素，元素都有索引。常用的实现类有 ArrayList、LinkedList 和 Vector。")]),a._v(" "),s("p",[a._v("Set：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元素，只允许存入一个null元素，必须保证元素唯一性。Set 接口常用实现类是 HashSet、LinkedHashSet 以及 TreeSet。")]),a._v(" "),s("p",[a._v("Map是一个键值对集合，存储键、值和之间的映射。 Key无序，唯一；value 不要求有序，允许重复。Map没有继承于Collection接口，从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。")]),a._v(" "),s("h2",{attrs:{id:"_4、hashmap-和-hashtable-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、hashmap-和-hashtable-有什么区别"}},[a._v("#")]),a._v(" 4、HashMap 和 Hashtable 有什么区别？")]),a._v(" "),s("p",[s("strong",[a._v("线程安全")]),a._v("： HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过 "),s("code",[a._v("synchronized")]),a._v(" 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap ）；")]),a._v(" "),s("p",[s("strong",[a._v("效率")]),a._v("： 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；（如果你要保证线程安全的话就使用 ConcurrentHashMap ）；")]),a._v(" "),s("p",[s("strong",[a._v("对Null key 和Null value的支持")]),a._v("： HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛NullPointerException。")]),a._v(" "),s("p",[s("strong",[a._v("初始容量大小和每次扩充容量大小的不同")]),a._v(" ：")]),a._v(" "),s("p",[a._v("创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。")]),a._v(" "),s("p",[a._v("创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小。也就是说 HashMap 总是使用2的幂作为哈希表的大小，后面会介绍到为什么是2的幂次方。")]),a._v(" "),s("p",[s("strong",[a._v("底层数据结构")]),a._v("： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。")]),a._v(" "),s("p",[a._v("推荐使用：在 Hashtable 的类注释可以看到，Hashtable 是保留类不建议使用，推荐在单线程环境下使用 HashMap 替代，如果需要多线程使用则用 ConcurrentHashMap 替代。")]),a._v(" "),s("h2",{attrs:{id:"_5、说一下-hashmap-的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、说一下-hashmap-的实现原理"}},[a._v("#")]),a._v(" 5、说一下 HashMap 的实现原理？")]),a._v(" "),s("p",[a._v("HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。")]),a._v(" "),s("p",[a._v("HashMap的数据结构： 在Java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。")]),a._v(" "),s("p",[a._v("HashMap 基于 Hash 算法实现的")]),a._v(" "),s("p",[a._v("当我们往HashMap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标")]),a._v(" "),s("p",[a._v("存储时，如果出现hash值相同的key，此时有两种情况。")]),a._v(" "),s("p",[a._v("(1)如果key相同，则覆盖原始值；")]),a._v(" "),s("p",[a._v("(2)如果key不同（出现冲突），则将当前的key-value放入链表中")]),a._v(" "),s("p",[a._v("获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。")]),a._v(" "),s("p",[a._v("理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。")]),a._v(" "),s("p",[a._v("需要注意Jdk 1.8中对HashMap的实现做了优化，当链表中的节点数据超过八个之后，该链表会转为红黑树来提高查询效率，从原来的O(n)到O(logn)")]),a._v(" "),s("h3",{attrs:{id:"什么是链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是链表"}},[a._v("#")]),a._v(" 什么是链表")]),a._v(" "),s("p",[a._v("链表是可以将物理地址上不连续的数据连接起来，通过指针来对物理地址进行操作，实现增删改查等功能。")]),a._v(" "),s("p",[a._v("链表大致分为单链表和双向链表")]),a._v(" "),s("p",[a._v("单链表:每个节点包含两部分,一部分存放数据变量的data,另一部分是指向下一节点的next指针")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/b139c85a637d06ef2dff2305690be56e.png",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[a._v("双向链表:除了包含单链表的部分,还增加的pre前一个节点的指针")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/0897ec9d18e4c0b5690a63d8473f37c1.png",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[a._v("链表的优点")]),a._v(" "),s("p",[a._v("（1）插入删除速度快（因为有next指针指向其下一个节点，通过改变指针的指向可以方便的增加删除元素）")]),a._v(" "),s("p",[a._v("（2）内存利用率高，不会浪费内存（可以使用内存中细小的不连续空间（大于node节点的大小），并且在需要空间的时候才创建空间）")]),a._v(" "),s("p",[a._v("（3）大小没有固定，拓展很灵活。")]),a._v(" "),s("p",[a._v("链表的缺点：")]),a._v(" "),s("ul",[s("li",[a._v("不能随机查找，必须从第一个开始遍历，查找效率低")])]),a._v(" "),s("h3",{attrs:{id:"hashmap在jdk1-7和jdk1-8中有哪些不同-hashmap的底层实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap在jdk1-7和jdk1-8中有哪些不同-hashmap的底层实现"}},[a._v("#")]),a._v(" HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现")]),a._v(" "),s("ul",[s("li",[a._v("在Java中，保存数据有两种比较简单的数据结构：数组和链表。"),s("strong",[a._v("数组的特点是：寻址容易，插入和删除困难；链表的特点是：寻址困难，但插入和删除容易；**所以我们将数组和链表结合在一起，发挥两者各自的优势，使用一种叫做**拉链法")]),a._v("的方式可以解决哈希冲突。")])]),a._v(" "),s("p",[a._v("HashMap JDK1.8之前")]),a._v(" "),s("p",[a._v("JDK1.8之前采用的是拉链法。"),s("strong",[a._v("拉链法")]),a._v("：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。")]),a._v(" "),s("p",[a._v("HashMap JDK1.8之后")]),a._v(" "),s("p",[a._v("相比于之前的版本，jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。")]),a._v(" "),s("p",[a._v("JDK1.8主要解决或优化了一下问题：")]),a._v(" "),s("ol",[s("li",[a._v("resize 扩容优化")]),a._v(" "),s("li",[a._v("引入了红黑树，目的是避免单条链表过长而影响查询效率，红黑树算法请参考")]),a._v(" "),s("li",[a._v("解决了多线程死循环问题，但仍是非线程安全的，多线程时可能会造成数据丢失问题。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/image-20220426141042213.png",alt:"image-20220426141042213"}})]),a._v(" "),s("h3",{attrs:{id:"hashmap的put方法的具体流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的put方法的具体流程"}},[a._v("#")]),a._v(" HashMap的put方法的具体流程？")]),a._v(" "),s("p",[a._v("当我们put的时候，首先计算 key的hash值，这里调用了 hash方法，hash方法实际是让key.hashCode()与key.hashCode()>>>16进行异或操作，高16bit补0，一个数和0异或不变，所以 hash 函数大概的作用就是：高16bit不变，低16bit和高16bit做了一个异或，目的是减少碰撞。按照函数注释，因为bucket数组大小是2的幂，计算下标index = (table.length - 1) & hash，如果不做 hash 处理，相当于散列生效的只有几个低 bit 位，为了减少散列的碰撞，设计者综合考虑了速度、作用、质量之后，使用高16bit和低16bit异或来简单处理减少碰撞，而且JDK8中用了复杂度 O（logn）的树结构来提升碰撞下的性能。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/03d380e48d04f767d7c46b1369cad95e.png",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[a._v("（1）判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；")]),a._v(" "),s("p",[a._v("（2）根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；")]),a._v(" "),s("p",[a._v("（3）判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；")]),a._v(" "),s("p",[a._v("（4）判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向5；")]),a._v(" "),s("p",[a._v("（5）遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；")]),a._v(" "),s("p",[a._v("（6）插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。")]),a._v(" "),s("h3",{attrs:{id:"什么是treemap-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是treemap-简介"}},[a._v("#")]),a._v(" 什么是TreeMap 简介")]),a._v(" "),s("p",[a._v("TreeMap 是一个有序的key-value集合，它是通过红黑树实现的。")]),a._v(" "),s("p",[a._v("TreeMap基于红黑树（Red-Black tree）实现。该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。")]),a._v(" "),s("p",[a._v("TreeMap是线程非同步的。")]),a._v(" "),s("h3",{attrs:{id:"如何决定使用-hashmap-还是-treemap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何决定使用-hashmap-还是-treemap"}},[a._v("#")]),a._v(" 如何决定使用 HashMap 还是 TreeMap？")]),a._v(" "),s("p",[a._v("对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历")]),a._v(" "),s("h3",{attrs:{id:"hashmap-和-concurrenthashmap-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-concurrenthashmap-的区别"}},[a._v("#")]),a._v(" HashMap 和 ConcurrentHashMap 的区别")]),a._v(" "),s("p",[a._v("ConcurrentHashMap对整个桶数组进行了分割分段(Segment)，然后在每一个分段上都用lock锁进行保护，相对于HashTable的synchronized锁的粒度更精细了一些，并发性能更好，而HashMap没有锁机制，不是线程安全的。（JDK1.8之后ConcurrentHashMap启用了一种全新的方式实现,利用CAS算法。）")]),a._v(" "),s("p",[a._v("HashMap的键值对允许有null，但是ConCurrentHashMap都不允许。")]),a._v(" "),s("h3",{attrs:{id:"concurrenthashmap-和-hashtable-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-和-hashtable-的区别"}},[a._v("#")]),a._v(" ConcurrentHashMap 和 Hashtable 的区别？")]),a._v(" "),s("p",[a._v("ConcurrentHashMap 和 Hashtable 的区别主要体现在实现线程安全的方式上不同。")]),a._v(" "),s("p",[a._v("底层数据结构： JDK1.7的 ConcurrentHashMap 底层采用 分段的数组+链表 实现，JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表/红黑二叉树。Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 数组+链表 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；")]),a._v(" "),s("p",[s("strong",[a._v("实现线程安全的方式")]),a._v("：")]),a._v(" "),s("p",[a._v("在JDK1.7的时候，ConcurrentHashMap（分段锁） 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。（默认分配16个Segment，比Hashtable效率提高16倍。） 到了 JDK1.8 的时候已经摒弃了Segment的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6以后 对 synchronized锁做了很多优化） 整个看起来就像是优化过且线程安全的 HashMap，虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；")]),a._v(" "),s("p",[a._v("Hashtable(同一把锁) :使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。")]),a._v(" "),s("h3",{attrs:{id:"concurrenthashmap-底层具体实现知道吗-实现原理是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-底层具体实现知道吗-实现原理是什么"}},[a._v("#")]),a._v(" ConcurrentHashMap 底层具体实现知道吗？实现原理是什么？")]),a._v(" "),s("p",[a._v("JDK1.7")]),a._v(" "),s("p",[a._v("首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。")]),a._v(" "),s("p",[a._v("在JDK1.7中，ConcurrentHashMap采用Segment + HashEntry的方式进行实现，结构如下：")]),a._v(" "),s("p",[a._v("一个 ConcurrentHashMap 里包含一个 Segment 数组。Segment 的结构和HashMap类似，是一种数组和链表结构，一个 Segment 包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素，每个 Segment 守护着一个HashEntry数组里的元素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment的锁。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/ed519c53b0df4c457eac09bc76c3b8e1.png",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[a._v("JDK1.8")]),a._v(" "),s("p",[a._v("在"),s("strong",[a._v("JDK1.8中，放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保证并发安全进行实现")]),a._v("，synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N倍。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/7baf6beb2c6d44d71c3dfcba529ee5d2.png",alt:"在这里插入图片描述"}})]),a._v(" "),s("h2",{attrs:{id:"_6、set有哪些实现类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、set有哪些实现类"}},[a._v("#")]),a._v(" 6、set有哪些实现类？")]),a._v(" "),s("p",[a._v("Set集合类似于一个罐子，丢进去的元素没有明显的顺序,所以我们如果要访问Set中的元素的时候就只能通过元素本身来访问，这就是为什么Set集合中的元素不能重复的原因")]),a._v(" "),s("p",[a._v("Set集合判断元素是否相等的标准")]),a._v(" "),s("p",[a._v("因为Set集合中的元素不能重复，所以Set集合一定实现了某个方法来判断集合元素相等，Set判断两个对象相同不是使用==运算符，而是根据equals方法。也就是说，只要两个对象用equals方法比较返回true，Set就不会接受这两个对象；")]),a._v(" "),s("p",[a._v("Set实现类不同的依据（集合内部排序的方法不同）")]),a._v(" "),s("p",[a._v("1.HashSet（排序的依据是元素的HashCode值）")]),a._v(" "),s("p",[a._v("当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据该HashCode值决定该对象在HashSet中的存储位置。如果有两个元素通过equals()方法比较返回true，但它们的hashCode()方法返回值不相等，HashSet将会把它们存储在不同的位置，依然可以添加成功。")]),a._v(" "),s("p",[a._v("2.LinkedHashSet")]),a._v(" "),s("p",[a._v("HashSet还有一个子类LinkedHashSet，LinkedHashSet集合也是根据元素的hashCode值来决定元素的存储位置，但它同时使用链表维护元素的次序，这样使得元素看起来是以插入的顺序保存的。也就是说，当遍历LinkedHashSet集合里的元素时，LinkedHashSet将会按元素的添加顺序来访问集合里的元素。")]),a._v(" "),s("p",[a._v("3.TreeSet")]),a._v(" "),s("p",[a._v("TreeSet是SortedSet接口的实现类，正如SortedSet名字所暗示的，TreeSet可以确保集合元素处于排序状态,这里说的排序状态不是只输入顺序，而是指TreeSet中的元素通过Comparator（）接口对元素排序以后，元素的排列分先后，有点类似于数组，而不是像Set一样混乱的摆放就像在一个罐子里一样，杂乱无章，因此TreeSet增加了访问第一个、前一个、后一个、最后一个元素的方法，并提供了三个从TreeSet中截取子TreeSet的方法。")]),a._v(" "),s("p",[a._v("​    1.Comparator comparator()：如果TreeSet采用了定制排序，则该方法返回定制排序所使用的Comparator；如果TreeSet采用了自然排序，则返回null。")]),a._v(" "),s("p",[a._v("2.Object first()：返回集合中的第一个元素。")]),a._v(" "),s("p",[a._v("3.Object last()：返回集合中的最后一个元素。")]),a._v(" "),s("p",[a._v("4.Object lower(Object e)：返回集合中位于指定元素之前的元素（即小于指定元素的最大元素，参考元素不需要是TreeSet集合里的元素）")]),a._v(" "),s("p",[a._v("5.Object higher (Object e)：返回集合中位于指定元素之后的元素（即大于指定元素的最小元素，参考元素不需要是TreeSet集合里的元素）。")]),a._v(" "),s("p",[a._v("6.SortedSet subSet(fromElement, toElement)：返回此Set的子集合，范围从fromElement（包含）到toElement（不包含）。")]),a._v(" "),s("p",[a._v("7.SortedSet headSet(toElement)：返回此Set的子集，由小于toElement的元素组成。")]),a._v(" "),s("p",[a._v("8.SortedSet tailSet(fromElement)：返回此Set的子集，由大于或等于fromElement的元素组成。")]),a._v(" "),s("p",[a._v("4.EnumSet:")]),a._v(" "),s("p",[a._v("EnumSet是一个专为枚举类设计的集合类，EnumSet中的所有元素都必须是指定枚举类型的枚举值，该枚举类型在创建EnumSet时显式或隐式地指定。EnumSet的集合元素也是有序的，EnumSet以枚举值在Enum类内的定义顺序来决定集合元素的顺序。")]),a._v(" "),s("h2",{attrs:{id:"_7、说一下-hashset-的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、说一下-hashset-的实现原理"}},[a._v("#")]),a._v(" 7、说一下 HashSet 的实现原理？")]),a._v(" "),s("p",[a._v("HashSet 是基于 HashMap 实现的，HashSet的值存放于HashMap的key上，HashMap的value统一为present，因此 HashSet 的实现比较简单，相关 HashSet 的操作，基本上都是直接调用底层 HashMap 的相关方法来完成，HashSet 不允许重复的值。")]),a._v(" "),s("p",[a._v("HashSet如何检查重复？HashSet是如何保证数据不可重复的？")]),a._v(" "),s("p",[a._v("向HashSet 中add ()元素时，判断元素是否存在的依据，不仅要比较hash值，同时还要结合equles 方法比较。")]),a._v(" "),s("p",[a._v("HashSet 中的add ()方法会使用HashMap 的put()方法。")]),a._v(" "),s("p",[a._v("HashMap 的 key 是唯一的，由源码可以看出 HashSet 添加进去的值就是作为HashMap 的key，并且在HashMap中如果K/V相同时，会用新的V覆盖掉旧的V，然后返回旧的V。所以不会重复（ HashMap 比较key是否相等是先比较hashcode 再比较equals ）。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" PRESENT "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("transient")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    map "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 调用HashMap的put方法,PRESENT是一个至始至终都相同的虚值")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" PRESENT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("p",[s("strong",[a._v("hashCode（）与equals（）的相关规定")]),a._v("：")]),a._v(" "),s("p",[a._v("如果两个对象相等，则hashcode一定也是相同的")]),a._v(" "),s("p",[a._v("两个对象相等,对两个equals方法返回true")]),a._v(" "),s("p",[a._v("两个对象有相同的hashcode值，它们也不一定是相等的")]),a._v(" "),s("p",[a._v("综上，equals方法被覆盖过，则hashCode方法也必须被覆盖")]),a._v(" "),s("p",[a._v("hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。")]),a._v(" "),s("p",[s("strong",[a._v("==与equals的区别")])]),a._v(" "),s("p",[a._v("==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同")]),a._v(" "),s("p",[a._v("==是指对内存地址进行比较 equals()是对字符串的内容进行比较")]),a._v(" "),s("p",[s("strong",[a._v("HashSet与HashMap的区别")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/image-20220426143048368.png",alt:"image-20220426143048368"}})]),a._v(" "),s("h2",{attrs:{id:"_8、arraylist-和-linkedlist-的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8、arraylist-和-linkedlist-的区别是什么"}},[a._v("#")]),a._v(" 8、ArrayList 和 LinkedList 的区别是什么？")]),a._v(" "),s("p",[a._v("1.ArrayList]是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。 （LinkedList是双向链表，有next也有previous）")]),a._v(" "),s("p",[a._v("2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。")]),a._v(" "),s("p",[a._v("3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。")]),a._v(" "),s("h2",{attrs:{id:"_9、如何实现数组和-list-之间的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9、如何实现数组和-list-之间的转换"}},[a._v("#")]),a._v(" 9、如何实现数组和 List 之间的转换？")]),a._v(" "),s("ul",[s("li",[a._v("Array 转 List： Arrays. asList(array) ；")]),a._v(" "),s("li",[a._v("List 转 Array：List 的 toArray() 方法。")])]),a._v(" "),s("h2",{attrs:{id:"_10、arraylist-和-vector-的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10、arraylist-和-vector-的区别是什么"}},[a._v("#")]),a._v(" 10、ArrayList 和 Vector 的区别是什么？")]),a._v(" "),s("p",[s("strong",[a._v("同步性")]),a._v("：")]),a._v(" "),s("p",[a._v("Vector是线程安全的，也就是说它的方法直线是线程同步的，而ArrayList是线程不安全的，它的方法之间是线程不同步的")]),a._v(" "),s("p",[a._v("如果只有一个线程去访问集合那么使用ArrayList，他不考虑线程安全的问题，所以效率会高一些")]),a._v(" "),s("p",[a._v("如果是多个线程去访问集合，那么使用Vector")]),a._v(" "),s("p",[s("strong",[a._v("数据增长性")])]),a._v(" "),s("p",[a._v("ArrayList和Vector集合都有一个初始容量的大小，当元素的个数超过存储容量是，就需要增加ArrayList和Vector的存储空间，每次增加不是")]),a._v(" "),s("p",[a._v("增加一个而是增加多个，Vector是增加原来的两倍，ArrayList没有明文规定，但是从源码中可以看出增长原来的1.5倍")]),a._v(" "),s("p",[a._v("ArrayList和Vector可以设置初始的存储空间的大小，Vector还以设置增长空间大小，而ArrayList不可以。")]),a._v(" "),s("h2",{attrs:{id:"_11、array-和-arraylist-有何区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11、array-和-arraylist-有何区别"}},[a._v("#")]),a._v(" 11、Array 和 ArrayList 有何区别？")]),a._v(" "),s("p",[a._v("Array 可以存储基本数据类型和对象，ArrayList 只能存储对象。")]),a._v(" "),s("p",[a._v("Array 是指定固定大小的，而 ArrayList 大小是自动扩展的。")]),a._v(" "),s("p",[a._v("Array 内置方法没有 ArrayList 多，比如 addAll、removeAll、iteration 等方法只有 ArrayList 有。")]),a._v(" "),s("p",[a._v("对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。")]),a._v(" "),s("h2",{attrs:{id:"_12、在-queue-中-poll-和-remove-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12、在-queue-中-poll-和-remove-有什么区别"}},[a._v("#")]),a._v(" 12、在 Queue 中 poll()和 remove()有什么区别？")]),a._v(" "),s("ul",[s("li",[a._v("相同点：都是返回第一个元素，并在队列中删除返回的对象。")]),a._v(" "),s("li",[a._v("不同点：如果没有元素 poll()会返回 null，而 remove()会直接抛出 NoSuchElementException 异常。")])]),a._v(" "),s("h2",{attrs:{id:"_13、哪些集合类是线程安全的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13、哪些集合类是线程安全的"}},[a._v("#")]),a._v(" 13、哪些集合类是线程安全的？")]),a._v(" "),s("p",[a._v("Vector，实现List接口，与ArrayList相比几乎相同，但是是线程安全的。底层是数组。")]),a._v(" "),s("p",[a._v("Stack，继承Vector类，先进后出。")]),a._v(" "),s("p",[a._v("HashTable，实现Map接口，与HashMap几乎完全相同，但是是线程安全的。")]),a._v(" "),s("p",[a._v("java.util.concurrent包下的所有集合类，例如：ConcurrentHashMap。")]),a._v(" "),s("h2",{attrs:{id:"_14、迭代器-iterator-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14、迭代器-iterator-是什么"}},[a._v("#")]),a._v(" 14、迭代器 Iterator 是什么？")]),a._v(" "),s("p",[a._v("是可以遍历集合的对象，为各种容器提供了公共的操作接口，隔离对容器的遍历操作和底层实现，从而解耦。")]),a._v(" "),s("h2",{attrs:{id:"_15、iterator-怎么使用-有什么特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15、iterator-怎么使用-有什么特点"}},[a._v("#")]),a._v(" 15、Iterator 怎么使用？有什么特点？")]),a._v(" "),s("p",[a._v("使用方法")]),a._v(" "),s("p",[a._v("(1)iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第\n一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。")]),a._v(" "),s("p",[a._v("(2) 使用next()获得序列中的下一个元素。")]),a._v(" "),s("p",[a._v("(3) 使用hasNext()检查序列中是否还有元素。")]),a._v(" "),s("p",[a._v("(4) 使用remove()将迭代器新返回的元素删除。")]),a._v(" "),s("p",[a._v("Java中的Iterator功能比较简单，并且只能单向移动：")]),a._v(" "),s("h2",{attrs:{id:"_16、iterator-和-listiterator-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16、iterator-和-listiterator-有什么区别"}},[a._v("#")]),a._v(" 16、Iterator 和 ListIterator 有什么区别？")]),a._v(" "),s("p",[a._v("1、Iterator 可遍历 Set 和 List 集合； ListIterator 只能遍历 List。")]),a._v(" "),s("p",[a._v("2、Iterator 只能单向遍历；ListIterator 可双向遍历（向前/后遍历）。")]),a._v(" "),s("p",[a._v("3、ListIterator 继承自 Iterator 接口，添加新功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Consumer")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Iterator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UnsupportedOperationException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"remove"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEachRemaining")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Consumer")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Objects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("requireNonNull")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br")])]),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ListIterator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Iterator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasPrevious")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("previous")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("previousIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br")])]),s("h2",{attrs:{id:"_17、怎么确保一个集合不能被修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17、怎么确保一个集合不能被修改"}},[a._v("#")]),a._v(" 17、怎么确保一个集合不能被修改？")]),a._v(" "),s("p",[a._v("可以使用 Collections. unmodifiableCollection(Collection c) 方法来创建一个只读集合，这样改变集合的任何操作都会抛出 Java. lang. UnsupportedOperationException 异常。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"x"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" clist "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Collections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("unmodifiableCollection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nclist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"y"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 运行时此行报错")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n复制代码\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"_18、队列和栈是什么-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18、队列和栈是什么-有什么区别"}},[a._v("#")]),a._v(" 18、队列和栈是什么？有什么区别？")]),a._v(" "),s("p",[a._v("1.队列(Queue)：是限定只能在表的一端进行插入和在另一端进行删除操作的线性表")]),a._v(" "),s("p",[a._v("2.栈(Stack)：是限定只能在表的一端进行插入和删除操作的线性表")]),a._v(" "),s("p",[a._v("区别：")]),a._v(" "),s("p",[a._v("（1）操作的名称不同。队列的插入称为入队，队列的删除称为出队。栈的插入称为进栈，栈的删除称为出栈。")]),a._v(" "),s("p",[a._v("（2）可操作的方式不同。队列是在队尾入队，队头出队，即两边都可操作。而栈的进栈和出栈都是在栈顶进行的，无法对栈底直接进行操作。")]),a._v(" "),s("p",[a._v("（3）操作的方法不同。队列是先进先出（FIFO），即队列的修改是依先进先出的原则进行的。新来的成员总是加入队尾（不能从中间插入），每次离开的成员总是队列头上（不允许中途离队）。而栈为后进先出（LIFO）,即每次删除（出栈）的总是当前栈中最新的元素，即最后插入（进栈）的元素，而最先插入的被放在栈的底部，要到最后才能删除。")]),a._v(" "),s("h2",{attrs:{id:"_19、java集合的快速失败机制-fail-fast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19、java集合的快速失败机制-fail-fast"}},[a._v("#")]),a._v(" 19、Java集合的快速失败机制 “fail-fast”？")]),a._v(" "),s("p",[a._v("是java集合的一种错误检测机制，当多个线程对集合进行结构上的改变的操作时，有可能会产生 fail-fast 机制。")]),a._v(" "),s("p",[a._v("例如：假设存在两个线程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生fail-fast机制。")]),a._v(" "),s("p",[a._v("原因：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。")]),a._v(" "),s("p",[a._v("解决办法：")]),a._v(" "),s("p",[a._v("在遍历过程中，所有涉及到改变modCount值得地方全部加上synchronized。")]),a._v(" "),s("p",[a._v("使用CopyOnWriteArrayList来替换ArrayList")])])}),[],!1,null,null,null);t.default=n.exports}}]);