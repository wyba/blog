(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{508:function(e,t,r){"use strict";r.r(t);var v=r(21),a=Object(v.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("blockquote",[r("p",[e._v("基础啊")])]),e._v(" "),r("h2",{attrs:{id:"_1、service是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、service是什么"}},[e._v("#")]),e._v(" 1、Service是什么")]),e._v(" "),r("p",[e._v("Service是Android四大组件之一，它可以在后台执行长时间运行操作而没有用户界面的应用组件。")]),e._v(" "),r("p",[e._v("Service的启动方式有两种:startService启动和bindService启动。")]),e._v(" "),r("p",[e._v("注意：服务与其他应用程序对象一样，在其托管进程的主线程中运行。这意味着，如果你的服务要执行任何CPU密集型(例如 MP3 播放)或阻塞(例如网络)操作，它应该在Service中再创建一个子线程，然后在这里去处理耗时操作就没问题了。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/cf204bc555ca563182778a65f55049f6.png",alt:"service"}})]),e._v(" "),r("h2",{attrs:{id:"_2、service和thread的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、service和thread的区别"}},[e._v("#")]),e._v(" 2、Service和Thread的区别")]),e._v(" "),r("p",[e._v("Service是安卓中系统的组件，它运行在独立进程的主线程中，不可以执行耗时操作。")]),e._v(" "),r("p",[e._v("Thread是程序执行的最小单元，分配CPU的基本单位，可以开启子线程执行耗时操作。")]),e._v(" "),r("p",[e._v("Service在不同Activity中可以获取自身实例，可以方便的对Service进行操作。")]),e._v(" "),r("p",[e._v("Thread在不同的Activity中难以获取自身实例，如果Activity被销毁，Thread实例就很难再获取得到。")]),e._v(" "),r("h2",{attrs:{id:"_3、intentservice用法及原理简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、intentservice用法及原理简介"}},[e._v("#")]),e._v(" 3、IntentService用法及原理简介")]),e._v(" "),r("p",[e._v("使用时一般重写它的onHandleIntent（Intent intent）方法，该方法参数的intent和Activity.startService(Intent intent)是同一个，该方法的代码会在子线程执行。")]),e._v(" "),r("p",[e._v("当任务执行完毕后，它会将自身停止。")]),e._v(" "),r("p",[e._v("如果多次调用Activity.startService(Intent intent)，则会将intent存入一个消息队列中，按顺序一个一个执行，全部执行完后才终止自身。")]),e._v(" "),r("p",[e._v("intentService 就是封装好的Service + Handler + Thread，一般用于后台执行耗时任务，拥有Service的特点（比如优先级比较高，不容易被系统杀死）。")]),e._v(" "),r("p",[e._v("源码分析：在intentService的onCreate方法中开启了一个handleThread(子线程 + 初始化好looper等)，同时用handler绑定该子线程的Looper。在onStartCommand中会将intent封装进Message中，发送，最后在handler的handMessage方法中，调用onHandleIntent（因此该方法是在handleThread线程操作）。")]),e._v(" "),r("p",[e._v("建议：一般是通过startService启动intentService，而不用bind，因为bind会使得IntentService跳过了onStartCommand方法。。导致任务分发出问题")]),e._v(" "),r("h2",{attrs:{id:"_4、android-5-0以上的隐式启动问题及其解决方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、android-5-0以上的隐式启动问题及其解决方案"}},[e._v("#")]),e._v(" 4、Android 5.0以上的隐式启动问题及其解决方案")]),e._v(" "),r("p",[e._v("一.当然最先想到的是显式启动")]),e._v(" "),r("p",[e._v("二.设置action和packageName")]),e._v(" "),r("p",[e._v("google在更新Android8.0后对Service的权限越发收紧。导致目前想要启动服务必需实现服务的前台化（否则在服务启动5秒后，系统将自动报错）。")]),e._v(" "),r("p",[e._v("下面我们就来看看如何在8.0上启动服务。")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("请注意8.0版本只能使用startForegroundService（）启动服务，不能在使用startService（）")])]),e._v(" "),r("li",[r("p",[e._v('请注意在new NotificationChannel(CHANNEL_ID,"主服务",NotificationManager.IMPORTANCE_HIGH);  的第一个参数id为Channel的通道id需要与Notification的setChannelId()设置的id一致，否则会报前台服务无效的异常。')])]),e._v(" "),r("li",[r("p",[e._v("注意启动服务前台化通知的方法是startForeground(),如果使用notificationManager.notify(),将不会关联你启动的服务,系统会将它作为一个普通通知处理")])])]),e._v(" "),r("h2",{attrs:{id:"_5、如何保证服务不被杀死"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、如何保证服务不被杀死"}},[e._v("#")]),e._v(" 5、如何保证服务不被杀死")]),e._v(" "),r("p",[e._v("一、前台进程 Foreground process")]),e._v(" "),r("p",[e._v("二、可见进程 Visible process")]),e._v(" "),r("p",[e._v("三、服务进程 Service process")]),e._v(" "),r("p",[e._v("四、后台进程 Background process")]),e._v(" "),r("p",[e._v("五、空进程 Empty process")]),e._v(" "),r("h3",{attrs:{id:"进程提权"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程提权"}},[e._v("#")]),e._v(" 进程提权")]),e._v(" "),r("p",[e._v("adj值越小的进程越不容易被杀死，相对普通进程来说能让adj去到0显然是最完美的，可是我们如何才能让一个完全没有可见元素的后台进程拥有前台进程的状态呢？Android给了Service这样一个功能：startForeground，它的作用就像其名字一样，将我们的Service置为前台，不过你需要发送一个Notification：")]),e._v(" "),r("h3",{attrs:{id:"双进程保护"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双进程保护"}},[e._v("#")]),e._v(" 双进程保护")]),e._v(" "),r("p",[e._v("START_STICKY：在Service被关闭后,重新开启Service")]),e._v(" "),r("p",[e._v("START_NOT_STICKY：服务被异常杀掉后，系统将会被设置为started状态，系统不会重启该服务，直到startService(Intent intent)方法再次被调用。")]),e._v(" "),r("p",[e._v("START_REDELIVER_INTENT：重传Intent，使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统会自动重启该服务,并将Intent的值传入。")]),e._v(" "),r("p",[e._v("START_STICKY_COMPATIBILITY：START_STICKY的兼容版本，但不保证服务被kill后一定能重启。")]),e._v(" "),r("h3",{attrs:{id:"使用jobservice来实现应用退出后重启service"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用jobservice来实现应用退出后重启service"}},[e._v("#")]),e._v(" 使用JobService来实现应用退出后重启Service")]),e._v(" "),r("p",[e._v("什么是JobService")]),e._v(" "),r("p",[e._v("JobService也是一个service，和普通的service不同的是，JobService是一个任务回调类，通过JobScheduler设置任务给系统，系统来调用JobService中的方法，具体处理什么任务需要我们自己在JobService中的回调方法中实现。那么关于任务的管理和进程的维护、调度当然是由系统来统一管理。")]),e._v(" "),r("p",[e._v("Google从Android SDK 21之后添加了JobScheduler来执行一些满足特定条件但不紧急的后台任务，我们可以利用JobScheduler来执行这些特殊的后台任务时来减少电量的消耗。")]),e._v(" "),r("h3",{attrs:{id:"保证息屏后不被释放资源杀死-wakelock的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#保证息屏后不被释放资源杀死-wakelock的使用"}},[e._v("#")]),e._v(" 保证息屏后不被释放资源杀死（WakeLock的使用）")]),e._v(" "),r("p",[e._v("需求：要在后台跑一个Service执行轮询，屏幕熄灭或锁屏后，仍然需要保持Service一直处于轮询状态。")]),e._v(" "),r("p",[e._v("应用程序中如果要在待机前保存数据状态的话，要保证此过程中不会进入待机。可以在 onResume() 或者 onStart() 中申请 wakelock 锁，即调用getLock()方法。")]),e._v(" "),r("p",[e._v("在 onPause() 或者 onDistroy() 中处理应用待机后再释放掉 wakelock 锁，此时调用releaseLock()方法")])])}),[],!1,null,null,null);t.default=a.exports}}]);