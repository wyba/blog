(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{503:function(e,v,_){"use strict";_.r(v);var t=_(21),o=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("blockquote",[_("p",[e._v("说明：谷歌还是牛啊。")])]),e._v(" "),_("h2",{attrs:{id:"android开发架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#android开发架构"}},[e._v("#")]),e._v(" Android开发架构")]),e._v(" "),_("p",[e._v("如果开发过程中大家各自为战，没有统一规范，久而久之，项目代码会变得混乱且后续难以维护。当使用统一的架构模式后，有很多的好处，如：")]),e._v(" "),_("ul",[_("li",[e._v("统一开发规范，使得代码整洁、规范，后续易于维护及扩展")]),e._v(" "),_("li",[e._v("提高开发效率(尤其在团队人员较多时)")]),e._v(" "),_("li",[e._v("模块单一职责，使得模块专注自己内部(面向对象)，"),_("strong",[e._v("模块间解耦")])])]),e._v(" "),_("p",[e._v("总之，开发架构是前人总结出来的一套行之有效的开发模式，目的是达到"),_("strong",[e._v("高内聚，低耦合")]),e._v("的效果，使得项目代码更健壮、易维护。")]),e._v(" "),_("p",[e._v("Android中常见的架构模式有"),_("code",[e._v("MVC（Model-View-Controller）")]),e._v("、"),_("code",[e._v("MVP（Model-View-Presenter）")]),e._v("、"),_("code",[e._v("MVVM（Model-View-ViewModel）")]),e._v("，一起来看下各自的特点:")]),e._v(" "),_("h3",{attrs:{id:"mvc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[e._v("#")]),e._v(" MVC")]),e._v(" "),_("p",[_("code",[e._v("MVC（Model-View-Controller）")]),e._v("是比较早期的架构模式，模式整体也比较简单。")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/15284956-1dcb6a97641d168e.png",alt:"img"}})]),e._v(" "),_("p",[e._v("MVC模式将程序分成了三个部分：")]),e._v(" "),_("ul",[_("li",[e._v("Model模型层：业务相关的数据(如网络请求数据、本地数据库数据等)及其对数据的处理")]),e._v(" "),_("li",[e._v("View视图层：页面视图(通过XML布局编写视图层)，负责接收用户输入、发起数据请求及展示结果页面")]),e._v(" "),_("li",[e._v("Controller控制器层：M与V之间的桥梁，负责业务逻辑")])]),e._v(" "),_("p",[e._v("MVC特点：")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("简单易用")]),e._v("：上图表述了数据整个流程："),_("code",[e._v("View")]),e._v("接收用户操作，通过"),_("code",[e._v("Controller")]),e._v("去处理业务逻辑，并通过"),_("code",[e._v("Model")]),e._v("去获取/更新数据，然后"),_("code",[e._v("Model层")]),e._v("又将最新的数据传回"),_("code",[e._v("View")]),e._v("层进行页面展示。")]),e._v(" "),_("li",[e._v("架构简单的另一面往往是对应的副作用："),_("strong",[e._v("由于XML布局能力弱，我们的View层的很多操作都是写在Activity/Fragment中，同时，Controller、Model层的代码也大都写在Activity/Fragment中，这就会导致一个问题，当业务逻辑比较复杂时，Activity/Fragment中的代码量会很大，其违背了类单一职责，不利于后续扩展及维护")]),e._v("。尤其是后期你刚接手的项目，一个Activity/Fragment类中的代码动辄上千行代码，那感觉着实酸爽：当然，如果业务很简单，使用MVC模式还是一种不错的选择。")])]),e._v(" "),_("h3",{attrs:{id:"mvp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[e._v("#")]),e._v(" MVP")]),e._v(" "),_("p",[_("code",[e._v("MVP（Model-View-Presenter）")]),e._v("，架构图如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/15284956-9132df9eaf06f7be.png",alt:"img"}})]),e._v(" "),_("p",[_("strong",[e._v("MVP各模块职责如下")]),e._v("：")]),e._v(" "),_("ul",[_("li",[e._v("Model模型：业务相关的数据(如网络请求数据、本地数据库数据等)及其对数据的处理")]),e._v(" "),_("li",[e._v("View视图：页面视图(Activity/Fragment)，负责接收用户输入、发起数据请求及展示结果页面")]),e._v(" "),_("li",[e._v("Presenter：M与V之间的桥梁，负责业务逻辑")])]),e._v(" "),_("p",[_("strong",[e._v("MVP特点")]),e._v("： "),_("code",[e._v("View")]),e._v("层接收用户操作，并通过持有的"),_("code",[e._v("Presenter")]),e._v("去处理业务逻辑，请求数据；接着"),_("code",[e._v("Presenter")]),e._v("层通过"),_("code",[e._v("Model")]),e._v("去获取数据，然后"),_("code",[e._v("Model")]),e._v("又将最新的数据传回"),_("code",[e._v("Presenter")]),e._v("层，"),_("code",[e._v("Presenter")]),e._v("层又持有"),_("code",[e._v("View")]),e._v("层的引用，进而将数据传给"),_("code",[e._v("View")]),e._v("层进行展示。")]),e._v(" "),_("p",[_("strong",[e._v("MVP相比MVC的几处变化")]),e._v("：")]),e._v(" "),_("ul",[_("li",[e._v("View层与Model层不再交互，而是通过Presenter去进行联系")]),e._v(" "),_("li",[e._v("本质上MVP是面向接口编程，Model/View/Presenter每层的职责分工明确，当业务复杂时，整个流程逻辑也是很清晰的")])]),e._v(" "),_("p",[e._v("当然，"),_("code",[e._v("MVP")]),e._v("也不是十全十美的，"),_("code",[e._v("MVP")]),e._v("本身也存在以下问题：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("View")]),e._v("层会抽象成"),_("code",[e._v("IView")]),e._v("接口，并在"),_("code",[e._v("IView")]),e._v("中声明一些列"),_("code",[e._v("View")]),e._v("相关的方法；同样的，"),_("code",[e._v("Presenter")]),e._v("会被抽象成"),_("code",[e._v("IPresenter")]),e._v("接口及其一些列方法，每当实现一个功能时，都需要编写多个接口及其对应的方法，实现起来相对比较繁琐，而且每次有改动时，对应的接口方法也基本都会再去改动。")]),e._v(" "),_("li",[_("code",[e._v("View")]),e._v("层与"),_("code",[e._v("Presenter")]),e._v("层相互持有，当"),_("code",[e._v("View")]),e._v("层关闭时，由于"),_("code",[e._v("Presenter")]),e._v("层不是生命周期感知的，可能会导致内存泄漏甚至是崩溃。")])]),e._v(" "),_("p",[e._v("ps：如果你的项目中使用了"),_("code",[e._v("RxJava")]),e._v("，可以使用 "),_("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%3A%2F%2Fgithub.com%2Fuber%2FAutoDispose",target:"_blank",rel:"noopener noreferrer"}},[e._v("AutoDispose"),_("OutboundLink")],1),e._v(" 自动解绑。")]),e._v(" "),_("h3",{attrs:{id:"mvvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[e._v("#")]),e._v(" MVVM")]),e._v(" "),_("p",[_("code",[e._v("MVVM（Model-View-ViewModel）")]),e._v("，架构图如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/15284956-d2d33e2b73c982b8.png",alt:"img"}})]),e._v(" "),_("p",[_("strong",[e._v("MVVM各职责如下")]),e._v("：")]),e._v(" "),_("ul",[_("li",[e._v("Model模型：业务相关的数据(如网络请求数据、本地数据库数据等)及其对数据的处理")]),e._v(" "),_("li",[e._v("View视图：页面视图(Activity/Fragment)，负责接收用户输入、发起数据请求及展示结果页面")]),e._v(" "),_("li",[e._v("ViewModel：M与V之间的桥梁，负责业务逻辑")])]),e._v(" "),_("p",[_("strong",[e._v("MVVM特点")]),e._v("：")]),e._v(" "),_("ul",[_("li",[e._v("View层接收用户操作，并通过持有的ViewModel去处理业务逻辑，请求数据；")]),e._v(" "),_("li",[e._v("ViewModel层通过Model去获取数据，然后Model又将最新的数据传回ViewModel层，到这里，ViewModel与Presenter所做的事基本是一样的。但是ViewModel不会也不能持有View层的引用，而是View层会通过观察者模式监听ViewModel层的数据变化，当有新数据时，View层能自动收到新数据并刷新界面。")])]),e._v(" "),_("h4",{attrs:{id:"ui驱动-vs-数据驱动"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ui驱动-vs-数据驱动"}},[e._v("#")]),e._v(" UI驱动 vs 数据驱动")]),e._v(" "),_("p",[_("code",[e._v("MVP")]),e._v("中，"),_("code",[e._v("Presenter")]),e._v("中需要持有"),_("code",[e._v("View")]),e._v("层的引用，当数据变化时，需要主动调用"),_("code",[e._v("View")]),e._v("层对应的方法将数据传过去并进行UI刷新，这种可以认为是UI驱动；而"),_("code",[e._v("MVVM")]),e._v("中，"),_("code",[e._v("ViewModel")]),e._v("并不会持有"),_("code",[e._v("View")]),e._v("层的引用，"),_("code",[e._v("View")]),e._v("层会监听数据变化，当"),_("code",[e._v("ViewModel")]),e._v("中有数据更新时，"),_("code",[e._v("View")]),e._v("层能直接拿到新数据并完成UI更新，这种可以认为是数据驱动，显然，"),_("code",[e._v("MVVM")]),e._v("相比于"),_("code",[e._v("MVP")]),e._v("来说更加解耦。")]),e._v(" "),_("h2",{attrs:{id:"mvvm的具体实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvvm的具体实现"}},[e._v("#")]),e._v(" MVVM的具体实现")]),e._v(" "),_("p",[e._v("上面介绍了"),_("code",[e._v("MVC/MVP/MVVM")]),e._v("的各自特点，其中"),_("code",[e._v("MVC/MVP")]),e._v("的具体使用方式，本文不再展开实现，接下来主要聊一下"),_("code",[e._v("MVVM")]),e._v("的使用及封装，"),_("code",[e._v("MVVM")]),e._v("也是官方推荐的架构模式。")]),e._v(" "),_("h3",{attrs:{id:"jetpack-mvvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jetpack-mvvm"}},[e._v("#")]),e._v(" Jetpack MVVM")]),e._v(" "),_("p",[_("code",[e._v("Jetpack")]),e._v("是官方推出的一系列组件库，使用组件库开发有很多好处，如：")]),e._v(" "),_("ul",[_("li",[e._v("遵循最佳做法：采用最新的设计方法构建，具有向后兼容性，可以减少崩溃和内存泄漏")]),e._v(" "),_("li",[e._v("消除样板代码：开发者可以更好地专注业务逻辑")]),e._v(" "),_("li",[e._v("减少不一致：可以在各种Android版本中运行，兼容性更好。")])]),e._v(" "),_("p",[e._v("为了实现上面的"),_("code",[e._v("MVVM")]),e._v("架构模式，"),_("code",[e._v("Jetpack")]),e._v("提供了多个组件来实现，具体来说有"),_("code",[e._v("Lifecycle、LiveData、ViewModel(这里的ViewModel是MVVM中ViewModel层的具体实现)")]),e._v("，其中"),_("code",[e._v("Lifecycle")]),e._v("负责生命周期相关；"),_("code",[e._v("LiveData")]),e._v("赋予类可观察，同时还是生命周期感知的(内部使用了"),_("code",[e._v("Lifecycle")]),e._v(")；"),_("code",[e._v("ViewModel")]),e._v("旨在以注重生命周期的方式存储和管理界面相关的数据，针对这几个库的详细介绍及使用方式就不再展开了。")]),e._v(" "),_("p",[e._v("通过这几个库，就可以实现"),_("code",[e._v("MVVM")]),e._v("了，官方也发布了"),_("code",[e._v("MVVM")]),e._v("的架构图：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/15284956-1e468f71ca3fa445.png",alt:"img"}})]),e._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),_("h3",{attrs:{id:"mvvm的优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvvm的优点"}},[e._v("#")]),e._v(" MVVM的优点")]),e._v(" "),_("p",[e._v("view和model 双向绑定，简化开发者的工作，不用专注于 更新视图，只需要专注于 实现业务逻辑；")]),e._v(" "),_("p",[e._v("绑定的model 简化了model的逻辑控制；")]),e._v(" "),_("h3",{attrs:{id:"mvvm的缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvvm的缺点"}},[e._v("#")]),e._v(" MVVM的缺点")]),e._v(" "),_("p",[e._v("view和model的绑定，使页面异常追踪变得 不方便，可能是view导致的bug,也可能使model导致的；")]),e._v(" "),_("p",[e._v("数据双向绑定不利于代码重用，View都绑定了一个model，不同模块的model都不同，就不能重用View；")])])}),[],!1,null,null,null);v.default=o.exports}}]);