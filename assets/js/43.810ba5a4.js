(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{527:function(a,s,t){"use strict";t.r(s);var n=t(21),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("blockquote",[t("p",[a._v("重中之重")])]),a._v(" "),t("p",[a._v("所谓多线程，就是说一个应用程序有多条执行路径，每当我们打开一个应用程序的时候，就像当与打开了一个进程，而进程中执行的操作，就是线程。以迅雷为例，打开迅雷就相当于打开一个进程，下载文件的操作就是线程，多线程就是同时下载多个文件")]),a._v(" "),t("p",[a._v("在Java中有两种方式实现多线程分别是继承Thread类和实现Runnable接口")]),a._v(" "),t("h2",{attrs:{id:"线程的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程的概念"}},[a._v("#")]),a._v(" 线程的概念")]),a._v(" "),t("p",[a._v("什么是进程")]),a._v(" "),t("p",[a._v("进程是操作系统中正在执行的不同的应用程序，例如：我们可以同时打开Word和记事本")]),a._v(" "),t("p",[a._v("什么是线程")]),a._v(" "),t("p",[a._v("线程是一个应用程序进程中不同的执行路径，例如：我们的WEB服务器，能够为多个用户同时提供请求服务")]),a._v(" "),t("p",[a._v("进程是不活泼的。进程从来不执行任何东西，它只是线程的容器。线程总是在某个进程环境中创建的，而且它的整个寿命期都在该进程中。")]),a._v(" "),t("p",[a._v("• Java 中的多线程是通过java.lang.Thread类来实现的.")]),a._v(" "),t("p",[a._v("• 一个Java应用程序java.exe，其实至少有三个线程: main()主线程， gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。")]),a._v(" "),t("p",[a._v("• 使用多线程的优点。")]),a._v(" "),t("p",[a._v("– 背景:以单核CPU为例，只使用单个线程先后完成多个任务(调用多个方法)，肯定比用多个线程来完成用的时间更短（因为单线程的可以减少cup的调度消耗的时间），为何仍需多线程呢?")]),a._v(" "),t("p",[a._v("– 多线程程序的优点:")]),a._v(" "),t("p",[a._v("1.提高应用程序的响应。对图形化界面更有意义，可增强用户体验。同时做多个事情。比如：一边听歌、一边写代码。")]),a._v(" "),t("p",[a._v("2.提高计算机系统CPU的利用率。")]),a._v(" "),t("p",[a._v("3.改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。")]),a._v(" "),t("p",[a._v("• 何时需要多线程")]),a._v(" "),t("p",[a._v("– 程序需要同时执行两个或多个任务。")]),a._v(" "),t("p",[a._v("– 需要一些后台运行的程序时。比如:Java后台运行的GC功能。")]),a._v(" "),t("p",[a._v("主线程")]),a._v(" "),t("p",[a._v("– 概念")]),a._v(" "),t("p",[a._v("• 即使Java程序没有显示的来声明一个线程，Java也会有一个线程存在该线程叫做主线程")]),a._v(" "),t("p",[a._v("• 可以调用Thread.currentThread()来获得当前线程")]),a._v(" "),t("h2",{attrs:{id:"线程的创建方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程的创建方法"}},[a._v("#")]),a._v(" 线程的创建方法")]),a._v(" "),t("p",[a._v("有两种方法来创建线程")]),a._v(" "),t("p",[a._v("• 继承Thread类\n– MyThread extends Thread\n» 需要覆盖run方法")]),a._v(" "),t("p",[a._v("• 实现Runnable接口\n– Runnable 中有一个方法run用来定义线程执行代码\n– public void run();")]),a._v(" "),t("p",[a._v("后面还会介绍两种，一共是四种创建方式。")]),a._v(" "),t("h2",{attrs:{id:"线程的启动和终止"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程的启动和终止"}},[a._v("#")]),a._v(" 线程的启动和终止")]),a._v(" "),t("p",[a._v("线程的启动")]),a._v(" "),t("p",[a._v("• 线程的启动需要调用Thread的start方法，不能直接调用run方法，如果直接调用run方法相当于方法调用。\n线程的终止")]),a._v(" "),t("p",[a._v("• 当run方法返回，线程终止，一旦线程终止后不能再次启动。")]),a._v(" "),t("p",[a._v("• 线程的终止可以调用线程的interrupt方法，但该方法不是最佳方法，最好是设置一个标记来控制线程的终止。")]),a._v(" "),t("p",[a._v("注意事项：一个线程只能启动一次，不能多次启动同一个线程。")]),a._v(" "),t("p",[a._v("线程控制基本方法")]),a._v(" "),t("p",[a._v("• Thread类的有关方法(1)")]),a._v(" "),t("p",[a._v("– void start():启动线程并执行对象的run()方法")]),a._v(" "),t("p",[a._v("– run():线程在被调度时执行的操作")]),a._v(" "),t("p",[a._v("– String getName():返回线程的名称")]),a._v(" "),t("p",[a._v("– void setName(String name):设置该线程名称")]),a._v(" "),t("p",[a._v("– static Thread currentThread():返回当前线程。")]),a._v(" "),t("p",[a._v("• 线程控制的基本方法")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/20210112205945797.png",alt:"在这里插入图片描述"}})]),a._v(" "),t("p",[a._v("线程的优先级\n– 线程的优先级越高占用CPU时间越长\n– 最高为10级，最低为1级，默认是5级\n线程的状态转换")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/20210112205954763.jpg",alt:"在这里插入图片描述"}})]),a._v(" "),t("p",[a._v("线程创建的选择")]),a._v(" "),t("p",[a._v("• 创建线程的两种方式。")]),a._v(" "),t("p",[a._v("开发中：优先选择实现Runnable 接口的方式来创建线程。")]),a._v(" "),t("p",[a._v("– 1.实现接口的方式没有类的单继承性的局限性。")]),a._v(" "),t("p",[a._v("– 2.实现接口的方式更适合来处理多个线程有共享数据的情况。")]),a._v(" "),t("h2",{attrs:{id:"线程的同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程的同步"}},[a._v("#")]),a._v(" 线程的同步")]),a._v(" "),t("p",[a._v("• 为什么需要线程同步：一个银行账号在同一时间不能接受多个线程的访问，因为这样会造成混乱\n• 线程的同步")]),a._v(" "),t("p",[a._v("synchronized")]),a._v(" "),t("p",[a._v("线程安全问题：")]),a._v(" "),t("p",[a._v("1 同一时间")]),a._v(" "),t("p",[a._v("2 多个线程")]),a._v(" "),t("p",[a._v("3 操作同一个账号")]),a._v(" "),t("p",[a._v("就会出现混乱情况，这种由于多线程引发的混乱情况，我们就称他为：线程安全问题")]),a._v(" "),t("p",[a._v("如何解决呢？同步操作了解决线程问题。")]),a._v(" "),t("p",[a._v("synchronized关键字")]),a._v(" "),t("p",[a._v("• synchronized 是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。")]),a._v(" "),t("p",[a._v("1、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。")]),a._v(" "),t("p",[a._v("2、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。")]),a._v(" "),t("p",[a._v("3、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。")]),a._v(" "),t("p",[a._v("4、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。")]),a._v(" "),t("h3",{attrs:{id:"方式一-同步代码块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方式一-同步代码块"}},[a._v("#")]),a._v(" 方式一:同步代码块")]),a._v(" "),t("p",[a._v("synchronized(同步监视器){undefined\n//需要被同步的代码\n}")]),a._v(" "),t("p",[a._v("说明:")]),a._v(" "),t("ol",[t("li",[a._v("操作共享数据的代码，即为需要被同步的代码")]),a._v(" "),t("li",[a._v("共享数据:多个线程共同操作的变量。比如: ticket 就是共享数据。")]),a._v(" "),t("li",[a._v("同步监视器，俗称:锁。任何一个类的对象，都可以充当锁。")]),a._v(" "),t("li",[a._v("补充:在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。")])]),a._v(" "),t("h3",{attrs:{id:"单例模式-懒汉模式的同步问题及解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式-懒汉模式的同步问题及解决"}},[a._v("#")]),a._v(" 单例模式：懒汉模式的同步问题及解决")]),a._v(" "),t("h3",{attrs:{id:"死锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[a._v("#")]),a._v(" 死锁")]),a._v(" "),t("p",[a._v("线程同步带来的问题：死锁")]),a._v(" "),t("p",[a._v("理解什么是死锁？")]),a._v(" "),t("p",[a._v("死锁问题的产生：")]),a._v(" "),t("p",[a._v(" 不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。")]),a._v(" "),t("p",[a._v(" 出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。")]),a._v(" "),t("p",[a._v("解决方法")]),a._v(" "),t("p",[a._v("➢通过逻辑算法来避免出现死锁。")]),a._v(" "),t("p",[a._v("➢尽量减少同步资源的定义。")]),a._v(" "),t("p",[a._v("➢尽量避免嵌套同步。")]),a._v(" "),t("h2",{attrs:{id:"线程的通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程的通信"}},[a._v("#")]),a._v(" 线程的通信")]),a._v(" "),t("p",[a._v("• wait/notify/notifyAll")]),a._v(" "),t("p",[a._v("– wait():执行此方法，当前线程就进入阻塞状态，并释放同步监视器。")]),a._v(" "),t("p",[a._v("– notify():执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait,就唤醒优先级高的。")]),a._v(" "),t("p",[a._v("– notifyAll():执行此方法，就会唤醒所有被wait的线程。")]),a._v(" "),t("p",[a._v("wait(), notify(), notifyAll()三个方法必须使用在同步代码块或同步方法中。")]),a._v(" "),t("p",[a._v("wait(), notify(), notifyAll三个方法的调用者必须是同步代码块或同步方法中的同步监视器否则，会出现IllegaLMonitorStateException异常.")]),a._v(" "),t("h2",{attrs:{id:"线程拓展部分内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程拓展部分内容"}},[a._v("#")]),a._v(" 线程拓展部分内容：")]),a._v(" "),t("h3",{attrs:{id:"jdk5-0新增方式一-实现callable接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk5-0新增方式一-实现callable接口"}},[a._v("#")]),a._v(" JDK5.0新增方式一：实现Callable接口")]),a._v(" "),t("p",[a._v("Runnable和Callable的区别：")]),a._v(" "),t("p",[a._v("1、Callable规定的方法是call(),Runnable规定的方法是run().")]),a._v(" "),t("p",[a._v("2、Callable的任务执行后可返回值，而Runnable的任务是不能有返回值。")]),a._v(" "),t("p",[a._v("3、call方法可以抛出异常，run方法不可以。")]),a._v(" "),t("h3",{attrs:{id:"jdk5-0新增方式二-使用线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk5-0新增方式二-使用线程池"}},[a._v("#")]),a._v(" JDK5.0新增方式二:使用线程池")]),a._v(" "),t("p",[a._v("背景:经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。")]),a._v(" "),t("p",[a._v("思路:提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。")]),a._v(" "),t("p",[a._v("JDK5.0起提供了线程池相关API: ExecutorService 和Executors")]),a._v(" "),t("p",[a._v("ExecutorService:真正的线程池接口。常见子类ThreadPoolExecutor")]),a._v(" "),t("p",[a._v("void execute(Runnable command):执行任务1命令，没有返回值，-般用来执行Runnable")]),a._v(" "),t("p",[a._v("< T > Future< T > submit(Callable< T > task):执行任务， 有返回值，一般来执行Callable")]),a._v(" "),t("p",[a._v("void shutdown():关闭连接池")]),a._v(" "),t("p",[a._v("Executors: 工具类、线程池的工厂类，用于创建并返回不同类型的线程池")]),a._v(" "),t("p",[a._v("Executors.newCachedThreadPool(): 创建一个可根据需要创建新线程的线程池")]),a._v(" "),t("p",[a._v("Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池")]),a._v(" "),t("p",[a._v("Executors.newSingleThreadExecutor(): 创建一个只有一个线程的线程池")]),a._v(" "),t("p",[a._v("Executors.newScheduledThreadPool(n): 创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。")]),a._v(" "),t("p",[a._v("好处:")]),a._v(" "),t("p",[a._v("1.提高响应速度(减少创建新线程的时间)")]),a._v(" "),t("p",[a._v("2.降低资源消耗(重复利用线程池中线程，不需要每次都创建)")]),a._v(" "),t("p",[a._v("3.便于线程管理")]),a._v(" "),t("p",[a._v("corePoolSize:核心池的大小")]),a._v(" "),t("p",[a._v("maximumPoolsize:最大线程数")]),a._v(" "),t("p",[a._v("keepAliveTime:线程没有任务时最多保持多长时间后会终止")]),a._v(" "),t("h2",{attrs:{id:"继承thread类和实现runnable方法的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承thread类和实现runnable方法的区别"}},[a._v("#")]),a._v(" 继承Thread类和实现Runnable方法的区别")]),a._v(" "),t("blockquote",[t("ul",[t("li",[a._v("继承Thread类不适合资源的共享，而实现Runnable接口很容易实现资源的共享")]),a._v(" "),t("li",[a._v("实现Runnable接口适合多个相同的程序代码的线程去处理同一个资源")]),a._v(" "),t("li",[a._v("避免了Java中的单继承限制")]),a._v(" "),t("li",[a._v("增强了程序的健壮性，代码可以被多个线程共享")])])]),a._v(" "),t("h2",{attrs:{id:"面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[a._v("#")]),a._v(" 面试题")]),a._v(" "),t("h3",{attrs:{id:"_1、什么是线程和进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是线程和进程"}},[a._v("#")]),a._v(" 1、什么是线程和进程？")]),a._v(" "),t("p",[a._v("什么是进程？")]),a._v(" "),t("p",[a._v("程序由指令和数据组成，但是这些指令要运行，数据要读写，就必须将指令加载到cpu，数据加载至内存。在指令运行过程中还需要用到磁盘，网络等设备，进程就是用来加载指令管理内存管理IO的。")]),a._v(" "),t("p",[a._v("进程是指在系统中正在运行的一个应用程序，程序一旦运行就是进程。比如.exe文件运行，进程就可以视为程序的一个实例，大部分程序都可以运行多个实例进程")]),a._v(" "),t("p",[a._v("总结：进程是把指令加载给CPU，数据加载到内存并执行的程序实例\n进程的特点：")]),a._v(" "),t("p",[a._v("1、每个进程可以包括多个线程")]),a._v(" "),t("p",[a._v("2、每个进程都有自己独立的内存空间，而其内部的线程可以共享这些内存空间，进程上下文切换的开销比较大，不同进程之间不共享内存\n什么是线程？")]),a._v(" "),t("p",[a._v("线程是进程的一个子集，一个线程就是一个指令流的执行，线程按照一定的顺序把这些指令流交给CPU执行，就是线程的执行\n区别与联系？")]),a._v(" "),t("p",[a._v("线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。")]),a._v(" "),t("p",[a._v("不同的进程使用不同的内存空间，而线程共享同一进程的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据。")]),a._v(" "),t("p",[a._v("线程作为操作系统能够进行运算调度的最小单位，进程作为资源分配的最小单位。")]),a._v(" "),t("p",[a._v("线程更轻量，线程上下文切换成本一般上要比进程上下文切换低")]),a._v(" "),t("h3",{attrs:{id:"_2、java中实现多线程有几种方法-较难"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、java中实现多线程有几种方法-较难"}},[a._v("#")]),a._v(" 2、Java中实现多线程有几种方法？（较难）")]),a._v(" "),t("p",[t("strong",[a._v("Thread的构造方法参数可以传入Runnable接口和FutureTask对象")])]),a._v(" "),t("p",[t("strong",[a._v("Runnable缺少的一项功能是，当线程终止时（即run（）完成时），我们无法使线程返回结果。为了支持此功能，Java中提供了Callable接口。")])]),a._v(" "),t("h4",{attrs:{id:"_1-继承thread类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-继承thread类"}},[a._v("#")]),a._v(" （1）继承Thread类")]),a._v(" "),t("p",[a._v("（1）定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。")]),a._v(" "),t("p",[a._v("（2）创建Thread子类的实例，即创建了线程对象。")]),a._v(" "),t("p",[a._v("（3）调用线程对象的start()方法来启动该线程。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyThread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"MyThread.run()"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyThread")]),a._v(" myThread1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nmyThread1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("h4",{attrs:{id:"_2-实现runable接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现runable接口"}},[a._v("#")]),a._v(" (2)实现runable接口")]),a._v(" "),t("p",[a._v("（1）定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。")]),a._v(" "),t("p",[a._v("（2）创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。")]),a._v(" "),t("p",[a._v("（3）调用线程对象的start()方法来启动该线程")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyThread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OtherClass")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"MyThread.run()"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("启动 MyThread，需要首先实例化一个 Thread，并传入自己的 MyThread 实例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyThread")]),a._v(" myThread "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" thread "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("myThread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("//事实上，当传入一个 Runnable target 参数给 Thread 后， Thread 的 run()方法就会调用 target.run() public void run() { if (target != null) { target.run(); } }")]),a._v(" "),t("h4",{attrs:{id:"_3-实现callable接口-创建futuretask-callable-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现callable接口-创建futuretask-callable-对象"}},[a._v("#")]),a._v(" (3)实现Callable接口（创建FutureTask(Callable)对象）")]),a._v(" "),t("p",[a._v("（1）创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。")]),a._v(" "),t("p",[a._v("（2）创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。")]),a._v(" "),t("p",[a._v("（3）使用FutureTask对象作为Thread对象的target创建并启动新线程。")]),a._v(" "),t("p",[a._v("（4）调用FutureTask对象的get()方法来获得子线程执行结束后的返回值")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SomeCallable")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OtherClass")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Callable")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n​\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// TODO Auto-generated method stub")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n​\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Callable")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" oneCallable "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SomeCallable")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("   \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//由Callable<Integer>创建一个FutureTask<Integer>对象：   ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FutureTask")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" oneTask "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FutureTask")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("oneCallable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("   \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//注释：FutureTask<Integer>是一个包装器，它通过接受Callable<Integer>来创建，它同时实现了Future和Runnable接口。 ")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//由FutureTask<Integer>创建一个Thread对象：   ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" oneThread "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("oneTask"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("   \noneThread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("   \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//至此，一个线程就创建完成了。")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br")])]),t("h3",{attrs:{id:"_3、future接口-callable接口-futuretask实现类的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、future接口-callable接口-futuretask实现类的关系"}},[a._v("#")]),a._v(" 3、Future接口，Callable接口，FutureTask实现类的关系")]),a._v(" "),t("p",[a._v("Callable接口中就一个抽象方法call()，有返回值")]),a._v(" "),t("p",[a._v("Future接口中定义了关于线程状态的方法，比如打断线程执行的cancel方法，判断该线程是否被取消的isCancelled()方法，返回线程是否执行完的isDone方法，以及重要的get方法获取返回值")]),a._v(" "),t("p",[a._v("FutureTask实现类实现了Future接口，并且有构造函数，参数是传入一个Callable接口，")]),a._v(" "),t("h3",{attrs:{id:"_4、什么是callable和future"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、什么是callable和future"}},[a._v("#")]),a._v(" 4、什么是Callable和Future?")]),a._v(" "),t("p",[a._v("Callable 接口类似于 Runnable，从名字就可以看出来了，但是 Runnable 不会返 回结果，并且无法抛出返回结果的异常，而 Callable 功能更强大一些，被线程执 行后，可以返回值，这个返回值可以被 Future 拿到，也就是说，Future 可以拿到 异步执行任务的返回值。可以认为是带有回调的 Runnable。Future 接口表示异步任务，是还没有完成的任务给出的未来结果。所以说 Callable用于产生结果，Future 用于获取结果")]),a._v(" "),t("p",[a._v("Futuretask类通过传入一个Callable接口创建一个有返回值的线程任务，并且其实现了Future接口，可以通过其get方法拿到这个结果")]),a._v(" "),t("h3",{attrs:{id:"_5、如何停止一个正在运行的线程-重要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、如何停止一个正在运行的线程-重要"}},[a._v("#")]),a._v(" 5、如何停止一个正在运行的线程？（重要）")]),a._v(" "),t("p",[a._v("（1）"),t("strong",[a._v("使用stop()来停止线程")]),a._v("：stop()方法让线程立即停止运行, 这种暴力停止可能会"),t("strong",[a._v("破坏线程业务的原子性")]),a._v("，不推荐使用")]),a._v(" "),t("p",[a._v("（2）使用interrupt产生打断标志位来停止线程")]),a._v(" "),t("h3",{attrs:{id:"_6、sleep和yield的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、sleep和yield的区别"}},[a._v("#")]),a._v(" 6、sleep和yield的区别？")]),a._v(" "),t("p",[a._v("状态的区别：")]),a._v(" "),t("p",[a._v("调用 sleep 会让当前线程从 Running 进入 Timed Waiting 状态（阻塞）")]),a._v(" "),t("p",[a._v("调用 yield 会让当前线程从 Running 进入 Runnable 就绪状态，然后调度执行其它线程\n调度的区别：")]),a._v(" "),t("p",[a._v("调用sleep之后，该线程将进入阻塞状态，分不到CPU的时间片")]),a._v(" "),t("p",[a._v("调用yield之后，该线程会让出CPU的使用权，但是任务调度器仍然可能分配给该线程时间片，从宏观上只是该线程被分配CPu的概率变低了")]),a._v(" "),t("h3",{attrs:{id:"_7、sleep-yield为什么是静态方法-重要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、sleep-yield为什么是静态方法-重要"}},[a._v("#")]),a._v(" 7、sleep，yield为什么是静态方法（重要）")]),a._v(" "),t("p",[a._v("Thread 类的 sleep()和 yield()方法将在当前正在执行的线程上运行。其他线程上调用这些方法是没有意义的。也就是说只有本线程才能执行休眠操作，如果sleep是成员方法，其他线程可以获得该线程的实例化对象，从而让此线程强制休眠（释放CPU的资源），这样会带来不可预估的后果。")]),a._v(" "),t("p",[a._v("join可以在其他线程中调用，因为其本身设计的意义就是其他线程等待该线程完成")]),a._v(" "),t("p",[a._v("wait是本线程获取锁之后，锁对象调用的wait方法，实际上还是在本线程中使用")]),a._v(" "),t("h3",{attrs:{id:"_8、有三个线程t1-t2-t3-如何保证顺序执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、有三个线程t1-t2-t3-如何保证顺序执行"}},[a._v("#")]),a._v(" 8、有三个线程T1,T2,T3,如何保证顺序执行？")]),a._v(" "),t("p",[a._v("（1）start join")]),a._v(" "),t("p",[a._v("（2）现在可以用wait-notify实现"),t("strong",[a._v("线程间通信")]),a._v("而达到顺序执行的目的")]),a._v(" "),t("h3",{attrs:{id:"_9、什么是不可变对象-它对写并发应用有什么帮助"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、什么是不可变对象-它对写并发应用有什么帮助"}},[a._v("#")]),a._v(" 9、什么是不可变对象，它对写并发应用有什么帮助？")]),a._v(" "),t("p",[a._v("答： 不可变对象(Immutable Objects)即对象一旦被创建它的状态（对象的数据，也即对象属性值）就不能改变，反之即为可变对象(MutableObjects)。不可变对象的类即为不可变类(Immutable Class)。")]),a._v(" "),t("p",[a._v("Java平台类库中包含许多不可变类，如String、基本类型的包装类、BigInteger和BigDecimal等。不可变对象天生是线程安全的。它们的常量（域）是在构造函数中创建的。既然它们的状态无法修改，这些常量永远不会变。")]),a._v(" "),t("p",[a._v("不可变对象永远是线程安全的。")]),a._v(" "),t("p",[a._v("只有满足如下状态，一个对象才是不可变的；它的状态不能在创建后再被修改；所有域都是final类型；并且，它被正确创建（创建期间没有发生this引用的逸出）")]),a._v(" "),t("h3",{attrs:{id:"_10、wait和sleep方法的不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、wait和sleep方法的不同"}},[a._v("#")]),a._v(" 10、wait和sleep方法的不同？")]),a._v(" "),t("p",[a._v("最大的不同是在等待时wait会释放锁，而sleep一直持有锁。wait通常被用于线程间交互，sleep通常被用于暂停执行。")]),a._v(" "),t("h3",{attrs:{id:"_11、synchronized和volatile关键字的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11、synchronized和volatile关键字的作用"}},[a._v("#")]),a._v(" 11、synchronized和volatile关键字的作用？")]),a._v(" "),t("p",[a._v("一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：")]),a._v(" "),t("p",[a._v("● 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。")]),a._v(" "),t("p",[a._v("● 禁止进行指令重排序。")]),a._v(" "),t("p",[a._v("● volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。")]),a._v(" "),t("p",[a._v("● volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。")]),a._v(" "),t("p",[a._v("● volatile仅能实现变量的修改可见性，并不能保证原子性；synchronized则可以保证变量的修改可见性和原子性。")]),a._v(" "),t("p",[a._v("● volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。")]),a._v(" "),t("p",[a._v("volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。")]),a._v(" "),t("h3",{attrs:{id:"_12、分析线程并发访问代码解释原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12、分析线程并发访问代码解释原因"}},[a._v("#")]),a._v(" 12、分析线程并发访问代码解释原因？")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Counter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("volatile")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("inc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        count"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[count="')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"]"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("VolatileTest")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Counter")]),a._v(" counter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Counter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    counter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("inc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("counter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br")])]),t("p",[a._v("上面的代码执行完后输出的结果确定为1000吗？答案是不一定，或者不等于 1000。你知道这是为什么吗？")]),a._v(" "),t("p",[a._v("在java的内存模型中每一个线程运行时都有一个线程栈，线程栈保存了线程运行时候变量值信息。当线程访问某一个对象时候值的时候，首先通过对象的引用找到对应在堆内存的变量的值，然后把堆内存变量的具体值load到线程本地内存中，建立一个变量副本，之后线程就不再和对象在堆内存变量值有任何关系，而是直接修改副本变量的值，在修改完之后的某一个时刻（线程退出之前），自动把线程变量副本的值回写到对象在堆中变量。这样在堆中的对象的值就产生变化了。")]),a._v(" "),t("p",[a._v("也就是说上面主函数中开启了1000个子线程，每个线程都有一个变量副本，每个线程修改变量只是临时修改了自己的副本，当线程结束时再将修改的值写入在主内存中，这样就出现了线程安全问题。因此结果就不可能等于1000了，一般都会小于1000。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/1558324405@7dc9f65f8739ada505662e2d876948f5.png",alt:"img"}})]),a._v(" "),t("h4",{attrs:{id:"_13、常用的线程池有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13、常用的线程池有哪些"}},[a._v("#")]),a._v(" 13、常用的线程池有哪些？")]),a._v(" "),t("p",[a._v("● newSingleThreadExecutor：创建一个单线程的线程池，此线程池保证所有任务的执行顺序按照任务的提交顺序执行。")]),a._v(" "),t("p",[a._v("● newFixedThreadPool：创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。")]),a._v(" "),t("p",[a._v("● newCachedThreadPool：创建一个可缓存的线程池，此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。")]),a._v(" "),t("p",[a._v("● newScheduledThreadPool：创建一个大小无限的线程池，此线程池支持定时以及周期性执行任务的需求。")]),a._v(" "),t("p",[a._v("● newSingleThreadExecutor：创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。")]),a._v(" "),t("h4",{attrs:{id:"_14、请叙述一下您对线程池的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14、请叙述一下您对线程池的理解"}},[a._v("#")]),a._v(" 14、请叙述一下您对线程池的理解？")]),a._v(" "),t("p",[a._v("（如果问到了这样的问题，可以展开的说一下线程池如何用、线程池的好处、线程池的启动策略）合理利用线程池能够带来三个好处。")]),a._v(" "),t("p",[a._v("第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。")]),a._v(" "),t("p",[a._v("第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。")]),a._v(" "),t("p",[a._v("第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")]),a._v(" "),t("h4",{attrs:{id:"_15、线程池的启动策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15、线程池的启动策略"}},[a._v("#")]),a._v(" 15、线程池的启动策略？")]),a._v(" "),t("p",[a._v("1、线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。")]),a._v(" "),t("p",[a._v("2、当调用execute()方法添加一个任务时，线程池会做如下判断：")]),a._v(" "),t("p",[a._v("（1）如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；")]),a._v(" "),t("p",[a._v("（2）如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列；")]),a._v(" "),t("p",[a._v("（3）如果这时候队列满了，而且正在运行的线程数量小于maximumPoolSize，那么还是要创建线程运行这个任务；")]),a._v(" "),t("p",[a._v("（4）如果队列满了，而且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会抛出异常，告诉调用者“我不能再接受任务了”。")]),a._v(" "),t("p",[a._v("（5）当一个线程完成任务时，它会从队列中取下一个任务来执行。")]),a._v(" "),t("p",[a._v("（6）当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大小。")]),a._v(" "),t("h3",{attrs:{id:"_16、如何控制某个方法允许并发访问线程的个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16、如何控制某个方法允许并发访问线程的个数"}},[a._v("#")]),a._v(" 16、如何控制某个方法允许并发访问线程的个数？")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("com"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("bjpowernode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("concurrent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Semaphore")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4.")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n5. *\n6. * @author dujubin\n7. *\n8. */")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9.")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SemaphoreTest")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/*\n11.* permits the initial number of permits available. This value may be negative，\n12.in which case releases must occur before any acquires will be granted.\n13.fair true if this semaphore will guarantee first-in first-out granting of\n14.permits under contention， else false \n15. */")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16.")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Semaphore")]),a._v(" semaphore "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Semaphore")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("，"),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("17.")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("18.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("19.")]),a._v("             "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20.")]),a._v("             "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("21.")]),a._v("                 "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("22.")]),a._v("                 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("23.")]),a._v("                     "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("24.")]),a._v("                 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("25.")]),a._v("             "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("26.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("27.")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("28.")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("29.")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30.")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("31.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("32.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//申请一个请求")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("33.")]),a._v("         semaphore"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("acquire")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("34.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" e1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("35.")]),a._v("             e1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("36.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("37.")]),a._v("             "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"进来了"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("38.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("39.")]),a._v("             "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("40.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("41.")]),a._v("             e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("42.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("43.")]),a._v("             "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"走了"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("44.")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//释放一个请求")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("45.")]),a._v("         semaphore"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("release")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("46.")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("47.")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br"),t("span",{staticClass:"line-number"},[a._v("35")]),t("br"),t("span",{staticClass:"line-number"},[a._v("36")]),t("br"),t("span",{staticClass:"line-number"},[a._v("37")]),t("br"),t("span",{staticClass:"line-number"},[a._v("38")]),t("br"),t("span",{staticClass:"line-number"},[a._v("39")]),t("br"),t("span",{staticClass:"line-number"},[a._v("40")]),t("br"),t("span",{staticClass:"line-number"},[a._v("41")]),t("br"),t("span",{staticClass:"line-number"},[a._v("42")]),t("br"),t("span",{staticClass:"line-number"},[a._v("43")]),t("br"),t("span",{staticClass:"line-number"},[a._v("44")]),t("br"),t("span",{staticClass:"line-number"},[a._v("45")]),t("br"),t("span",{staticClass:"line-number"},[a._v("46")]),t("br"),t("span",{staticClass:"line-number"},[a._v("47")]),t("br")])]),t("p",[a._v("可以使用Semaphore控制，第16行的构造函数创建了一个Semaphore对象，并且初始化了5个信号。这样的效果是控件test方法最多只能有5个线程并发访问，对于5个线程时就排队等待，走一个来一下。第33行，请求一个信号（消费一个信号），如果信号被用完了则等待，第45行释放一个信号，释放的信号新的线程就可以使用了。")]),a._v(" "),t("h3",{attrs:{id:"_17、三个线程a、b、c并发运行-b-c需要a线程的数据怎么实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17、三个线程a、b、c并发运行-b-c需要a线程的数据怎么实现"}},[a._v("#")]),a._v(" 17、三个线程a、b、c并发运行，b，c需要a线程的数据怎么实现?")]),a._v(" "),t("p",[a._v("根据问题的描述，我将问题用以下代码演示，ThreadA、ThreadB、ThreadC，ThreadA用于初始化数据num，只有当num初始化完成之后再让ThreadB和ThreadC获取到初始化后的变量num。分析过程如下：")]),a._v(" "),t("p",[a._v("考虑到多线程的不确定性，因此我们不能确保ThreadA就一定先于ThreadB和ThreadC前执行，就算ThreadA先执行了，我们也无法保证ThreadA什么时候才能将变量num给初始化完成。因此我们必须让ThreadB和ThreadC去等待ThreadA完成任何后发出的消息。")]),a._v(" "),t("p",[a._v("现在需要解决两个难题，一是让ThreadB和ThreadC等待ThreadA先执行完，二是ThreadA执行完之后给ThreadB和ThreadC发送消息。")]),a._v(" "),t("p",[a._v("解决上面的难题我能想到的两种方案，一是使用纯Java API的Semaphore类来控制线程的等待和释放，二是使用Android提供的Handler消息机制。")]),a._v(" "),t("h3",{attrs:{id:"_18、乐观锁和悲观锁的理解及如何实现-有哪些实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18、乐观锁和悲观锁的理解及如何实现-有哪些实现方式"}},[a._v("#")]),a._v(" 18、乐观锁和悲观锁的理解及如何实现，有哪些实现方式")]),a._v(" "),t("p",[a._v("悲观锁：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。")]),a._v(" "),t("p",[a._v("传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。")]),a._v(" "),t("p",[a._v("再比如Java里面的同步原语synchronized关键字的实现也是悲观锁。")]),a._v(" "),t("p",[a._v("乐观锁：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。")]),a._v(" "),t("p",[a._v("在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。")]),a._v(" "),t("p",[a._v("乐观锁的实现方式：")]),a._v(" "),t("p",[a._v("1、使用版本标识来确定读到的数据与提交时的数据是否一致。提交后修改版本标识，不一致时可以采取丢弃和再次尝试的策略。")]),a._v(" "),t("p",[a._v("2、java中的Compare and Swap即CAS ，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。　CAS 操作中包含三个操作数 —— 需要读写的内存位置（V）、进行比较的预期原值（A）和拟写入的新值(B)。如果内存位置V的值与预期原值A相匹配，那么处理器会自动将该位置值更新为新值B。否则处理器不做任何操作。")]),a._v(" "),t("p",[a._v("CAS缺点：")]),a._v(" "),t("p",[a._v("1、ABA问题：")]),a._v(" "),t("p",[a._v("比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但可能存在潜藏的问题。从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。")]),a._v(" "),t("p",[a._v("2、循环时间长开销大：")]),a._v(" "),t("p",[a._v("对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。")]),a._v(" "),t("p",[a._v("3、"),t("strong",[a._v("只能保证一个共享变量的原子操作：")])]),a._v(" "),t("p",[a._v("当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。")]),a._v(" "),t("h3",{attrs:{id:"_19、cas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19、cas"}},[a._v("#")]),a._v(" 19、CAS")]),a._v(" "),t("p",[a._v("CAS操作的流程：")]),a._v(" "),t("p",[a._v("CAS是英文单词Compare and Swap的缩写，翻译过来就是比较并替换。")]),a._v(" "),t("p",[a._v("底层通过Unsafe类提供的操作系统原生方法来实现")]),a._v(" "),t("p",[a._v("CAS机制中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。")]),a._v(" "),t("p",[a._v("更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为B。")]),a._v(" "),t("p",[a._v("假设有变量i目前的值是10，线程1想要做自增操作")]),a._v(" "),t("p",[a._v("对于线程一来讲，变量的预期值是10，但是如果有其他线程2修改了内存(主存)中i的值为11，这时对于线程1来讲i就是被修改了（预期值与内存值不同），因此不能自增，需要把自身的预期值改为11，再与主存值比较是否相同（也就是判定该值是否被其他线程修改），这个过程称为自旋，直到比较成功，在进行更新（自增）")]),a._v(" "),t("p",[a._v("CAS的自旋：当线程想要对某个变量进行更新操作时，需要先把自己缓存中的期望值与主存中的值进行比较（如果相同，说明没有其他线程对此变量进行修改），如果不相同，把自身缓存中的期望值更改为主存中的值，再次进行比较，这种过程叫做自旋，比较结果相同时候，自旋成功，该线程可以进行更新的操作。")]),a._v(" "),t("p",[a._v("CAS：比较并更新，比较的过程就是自旋的过程，自旋成功才能够进行数值的更新")]),a._v(" "),t("p",[a._v("Unsafe是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地（Native）方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定的内存数据。Unsafe类存在sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，因为Java中的CAS操作的执行依赖于Unsafe类的方法。")]),a._v(" "),t("p",[a._v("注意Unsafe类的所有方法都是native修饰的，也就是说unsafe类中的方法都直接调用操作系统底层资源执行相应的任务。")]),a._v(" "),t("h3",{attrs:{id:"_20、synchronized与cas的区别-重要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20、synchronized与cas的区别-重要"}},[a._v("#")]),a._v(" 20、synchronized与CAS的区别（重要）")]),a._v(" "),t("p",[a._v("对于资源竞争较少的情况，使用synchronized同步锁进行线程阻塞和唤醒切换以及用户态内核态间的切换操作额外浪费消耗cpu资源；而CAS基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，因此可以获得更高的性能。")]),a._v(" "),t("p",[a._v("对于资源竞争严重的情况，CAS自旋的概率会比较大（比如getAndAddInt方法中的do-while循环），从而浪费更多的CPU资源，效率低于synchronized。")]),a._v(" "),t("h3",{attrs:{id:"_21、cas的缺点-重要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21、cas的缺点-重要"}},[a._v("#")]),a._v(" 21、CAS的缺点（重要）")]),a._v(" "),t("p",[t("strong",[a._v("CPU开销过大")])]),a._v(" "),t("p",[a._v("在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很到的压力。")]),a._v(" "),t("p",[a._v("当线程比较多的时候，对于某个资源竞争激烈，可能会导致一些线程的CAS一直处于自旋状态，从而白白浪费CPU资源")]),a._v(" "),t("p",[t("strong",[a._v("不能保证多个变量的原子性")])]),a._v(" "),t("p",[a._v("CAS机制所保证的知识一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用synchronized了。")]),a._v(" "),t("p",[a._v("如何解决CAS只能保证一个变量的原子性操作问题？")]),a._v(" "),t("p",[a._v("使用引用类型包装需要保证原子性的变量，之后再用AtomicRefernce对该引用类型进行包装")]),a._v(" "),t("h3",{attrs:{id:"_22、什么是aba问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22、什么是aba问题"}},[a._v("#")]),a._v(" 22、什么是ABA问题？")]),a._v(" "),t("p",[a._v("在线程进行自旋的时候，假设线程1的期望值是A，而此时主存存储的对象也是A，但是此时其他线程通过CAS操作将主存中的数值改成了B，再次又改回了A，这时线程1进行CAS操作，由于主存和线程1的期望值是相同的，这时线程1便认为该值没有被修改，但是实际上该值是经历了其他线程的两次修改的之后的值。")]),a._v(" "),t("p",[a._v("这个过程看起来没有问题，结合实际有问题，比如剩余100有两个线程需要提取100，但是只能一个，假设线程1使用CAS提取了100，剩余0，本来线程2不应该再提取了，但是这时，线程3（老板）给打了100元过来，这时线程2便可以在提取100元，而误认为线程1没有提取到，是自己竞争到了，这与实际情况相悖，也就是说线程2被骗了！")]),a._v(" "),t("p",[a._v("解决方法：使用AtomicStampedReference类，对于每个对象都采用版本号机制，线程对对象进行更新时，也会对其版本号进行更新，而CAS比较时需要比较版本号是否相同。")]),a._v(" "),t("p",[a._v("或者使用锁（syn Reen）")]),a._v(" "),t("h3",{attrs:{id:"_23、什么是原子操作-在-java-concurrency-api-中有哪些原-子类-atomic-classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23、什么是原子操作-在-java-concurrency-api-中有哪些原-子类-atomic-classes"}},[a._v("#")]),a._v(" 23、什么是原子操作？在 Java Concurrency API 中有哪些原 子类(atomic classes)？")]),a._v(" "),t("p",[a._v("原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。")]),a._v(" "),t("p",[a._v("处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。")]),a._v(" "),t("p",[a._v("在 Java 中可以通过锁和循环 CAS 的方式来实现原子操作。 CAS 操作——")]),a._v(" "),t("p",[a._v("Compare & Set，或是 Compare & Swap，现在几乎所有的 CPU 指令都支持 CAS")]),a._v(" "),t("p",[a._v("的原子操作。")]),a._v(" "),t("p",[a._v("原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境")]),a._v(" "),t("p",[a._v("下避免数据不一致必须的手段。")]),a._v(" "),t("p",[a._v("int++并不是一个原子操作，所以当一个线程读取它的值并加 1 时，另外一个线程")]),a._v(" "),t("p",[a._v("有可能会读到之前的值，这就会引发错误。")]),a._v(" "),t("p",[a._v("为了解决这个问题，必须保证增加操作是原子的，在 JDK1.5 之前我们可以使用同")]),a._v(" "),t("p",[a._v("步技术来做到这一点。到 JDK1.5，java.util.concurrent.atomic 包提供了 int 和")]),a._v(" "),t("p",[a._v("long 类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需")]),a._v(" "),t("p",[a._v("要使用同步。")]),a._v(" "),t("p",[a._v("java.util.concurrent 这个包里面提供了一组原子类。其基本的特性就是在多线程")]),a._v(" "),t("p",[a._v("环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当")]),a._v(" "),t("p",[a._v("某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像")]),a._v(" "),t("p",[a._v("自旋锁一样，一直等到该方法执行完成，才由 JVM 从等待队列中选择一个另一个")]),a._v(" "),t("p",[a._v("线程进入，这只是一种逻辑上的理解。")]),a._v(" "),t("p",[a._v("原子类：AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference")]),a._v(" "),t("p",[a._v("原子数组：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray")]),a._v(" "),t("p",[a._v("原子属性更新器：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，")]),a._v(" "),t("p",[a._v("AtomicReferenceFieldUpdater")]),a._v(" "),t("p",[a._v("解决 ABA 问题的原子类：AtomicMarkableReference（通过引入一个 boolean")]),a._v(" "),t("p",[a._v("来反映中间有没有变过），AtomicStampedReference（通过引入一个 int 来累")]),a._v(" "),t("p",[a._v("加来反映中间有没有变过）")]),a._v(" "),t("h3",{attrs:{id:"_24、synchronized原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24、synchronized原理"}},[a._v("#")]),a._v(" 24、synchronized原理")]),a._v(" "),t("p",[a._v("为了避免临界区的竞态条件发生，有多种手段可以达到目的。")]),a._v(" "),t("p",[a._v("阻塞式的解决方案：synchronized，Lock\n非阻塞式的解决方案：原子变量")]),a._v(" "),t("p",[a._v("synchronized，即俗称的【对象锁】，它采用互斥的方式让同一时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住。这样就能保证拥有锁的线程可以安全的执行临界区内的代码，不用担心线程上下文切换。")]),a._v(" "),t("p",[a._v("synchronized的三个作用")]),a._v(" "),t("p",[a._v("原子性：确保线程互斥的访问同步代码\n可见性：保证共享变量的修改能够及时可见\n有序性：有效解决重排序问题")]),a._v(" "),t("p",[t("strong",[a._v("Synchronized的语义底层是通过一个monitor的对象来完成")])]),a._v(" "),t("p",[a._v("其实wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/20210815163352506.png",alt:"img"}})]),a._v(" "),t("p",[a._v("Monitor 被翻译为监视器或管程")]),a._v(" "),t("p",[a._v("每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的 Mark Word 中就被设置指向 Monitor 对象的指针")]),a._v(" "),t("p",[a._v("刚开始 Monitor 中 Owner 为 null")]),a._v(" "),t("p",[a._v("当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一个 Owner")]),a._v(" "),t("p",[a._v("在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入EntryList BLOCKED")]),a._v(" "),t("p",[a._v("Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的")]),a._v(" "),t("p",[a._v("图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程")]),a._v(" "),t("p",[a._v("从JDK5引入了现代操作系统新增加的CAS原子操作（ JDK5中并没有对synchronized关键字做优化，而是体现在J.U.C中，所以在该版本concurrent包有更好的性能 ），从JDK6开始，就对synchronized的实现机制进行了较大调整，包括使用JDK5引进的CAS自旋之外，还增加了自适应的CAS自旋、锁消除、锁粗化、偏向锁、轻量级锁这些优化策略。由于此关键字的优化使得性能极大提高.")]),a._v(" "),t("h3",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])])])}),[],!1,null,null,null);s.default=e.exports}}]);