(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{516:function(t,e,a){"use strict";a.r(e);var _=a(21),p=Object(_.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("毁灭吧")])]),t._v(" "),a("p",[t._v("OkHttp 可以说是 Android 开发中最常见的网络请求框架，OkHttp 使用方便，扩展性强，功能强大，OKHttp 源码与原理也是面试中的常客。")]),t._v(" "),a("h2",{attrs:{id:"_1、okhttp请求整体流程介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、okhttp请求整体流程介绍"}},[t._v("#")]),t._v(" 1、OKHttp请求整体流程介绍")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/77094b36acaf2edd7384354267f875e038019312.png",alt:"img"}})]),t._v(" "),a("p",[t._v("（1）通过建造者模式构建 OKHttpClient 与 Request")]),t._v(" "),a("p",[t._v("（2）OKHttpClient 通过 newCall 发起一个新的请求")]),t._v(" "),a("p",[t._v("（3）通过分发器维护请求队列与线程池，完成请求调配")]),t._v(" "),a("p",[t._v("（4）通过五大默认拦截器完成请求重试，缓存处理，建立连接等一系列操作")]),t._v(" "),a("p",[t._v("（5）得到网络请求结果")]),t._v(" "),a("h2",{attrs:{id:"_2、okhttp分发器是怎样工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、okhttp分发器是怎样工作的"}},[t._v("#")]),t._v(" 2、OKHttp分发器是怎样工作的?")]),t._v(" "),a("p",[t._v("分发器的主要作用是维护请求队列与线程池,比如我们有100个异步请求，肯定不能把它们同时请求，而是应该把它们排队分个类，分为正在请求中的列表和正在等待的列表， 等请求完成后，即可从等待中的列表中取出等待的请求，从而完成所有的请求")]),t._v(" "),a("p",[t._v("而这里同步请求各异步请求又略有不同")]),t._v(" "),a("p",[t._v("同步请求")]),t._v(" "),a("p",[t._v("synchronizedvoidexecuted(RealCall call){ runningSyncCalls.add(call);}因为同步请求不需要线程池，也不存在任何限制。所以分发器仅做一下记录。后续按照加入队列的顺序同步请求即可")]),t._v(" "),a("p",[t._v("异步请求")]),t._v(" "),a("p",[t._v("synchronizedvoidenqueue(AsyncCall call){//请求数最大不超过64,同一Host请求不能超过5个if (runningAsyncCalls.size() < maxRequests && runningCallsForHost(call) < maxRequestsPerHost)    {  runningAsyncCalls.add(call);  executorService().execute(call); } else {  readyAsyncCalls.add(call); }}当正在执行的任务未超过最大限制64，同时同一 Host 的请求不超过5个，则会添加到正在执行队列，同时提交给线程池。否则先加入等待队列。每个任务完成后，都会调用分发器的 finished 方法,这里面会取出等待队列中的任务继续执行")]),t._v(" "),a("h2",{attrs:{id:"_3、-okhttp拦截器是怎样工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、-okhttp拦截器是怎样工作的"}},[t._v("#")]),t._v(" 3、 OKHttp拦截器是怎样工作的?")]),t._v(" "),a("p",[t._v("责任链，顾名思义，就是用来处理相关事务责任的一条执行链，执行链上有多个节点，每个节点都有机会（条件匹配）处理请求事务，如果某个节点处理完了就可以根据实际业务需求传递给下一个节点继续处理或者返回处理完毕。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/0823dd54564e9258b14d5b92746aa551cdbf4e47.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_4、应用拦截器和网络拦截器有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、应用拦截器和网络拦截器有什么区别"}},[t._v("#")]),t._v(" 4、应用拦截器和网络拦截器有什么区别?")]),t._v(" "),a("p",[t._v("从整个责任链路来看，应用拦截器是最先执行的拦截器，也就是用户自己设置 request 属性后的原始请求，而网络拦截器位于 ConnectInterceptor 和 CallServerInterceptor  之间，此时网络链路已经准备好，只等待发送请求数据。它们主要有以下区别")]),t._v(" "),a("p",[t._v("首先，应用拦截器在 RetryAndFollowUpInterceptor 和 CacheInterceptor  之前，所以一旦发生错误重试或者网络重定向，网络拦截器可能执行多次，因为相当于进行了二次请求，但是应用拦截器永远只会触发一次。另外如果在  CacheInterceptor 中命中了缓存就不需要走网络请求了，因此会存在短路网络拦截器的情况。")]),t._v(" "),a("p",[t._v("其次，除了 CallServerInterceptor 之外，每个拦截器都应该至少调用一次 realChain.proceed  方法。实际上在应用拦截器这层可以多次调用 proceed 方法（本地异常重试）或者不调用 proceed  方法（中断），但是网络拦截器这层连接已经准备好，可且仅可调用一次 proceed 方法。")]),t._v(" "),a("p",[t._v("最后，从使用场景看，应用拦截器因为只会调用一次，通常用于统计客户端的网络请求发起情况；而网络拦截器一次调用代表了一定会发起一次网络通信，因此通常可用于统计网络链路上传输的数据。")]),t._v(" "),a("h2",{attrs:{id:"_5、okhttp如何复用tcp连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、okhttp如何复用tcp连接"}},[t._v("#")]),t._v(" 5、OKHttp如何复用TCP连接?")]),t._v(" "),a("p",[t._v("ConnectInterceptor  的主要工作就是负责建立 TCP 连接，建立 TCP 连接需要经历三次握手四次挥手等操作，如果每个 HTTP 请求都要新建一个 TCP  消耗资源比较多 而 Http1.1 已经支持 keep-alive ,即多个 Http 请求复用一个 TCP 连接，OKHttp  也做了相应的优化，下面我们来看下 OKHttp 是怎么复用 TCP 连接的")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/c2fdfc039245d6884af85170422a0917d01b245a.png",alt:"img"}})]),t._v(" "),a("p",[t._v("首先会尝试使用 已给请求分配的连接。（已分配连接的情况例如重定向时的再次请求，说明上次已经有了连接）若没有 已分配的可用连接，就尝试从连接池中 匹配获取。因为此时没有路由信息，所以匹配条件：address 一致—— host、port、代理等一致，且匹配的连接可以接受新的请求。若从连接池没有获取到，则传入 routes 再次尝试获取，这主要是针对 Http2.0 的一个操作, Http2.0 可以复用 square.com 与 square.ca 的连接若第二次也没有获取到，就创建 RealConnection 实例，进行 TCP + TLS 握手，与服务端建立连接。此时为了确保 Http2.0 连接的多路复用性，会第三次从连接池匹配。因为新建立的连接的握手过程是非线程安全的，所以此时可能连接池新存入了相同的连接。第三次若匹配到，就使用已有连接，释放刚刚新建的连接；若未匹配到，则把新连接存入连接池并返回。")]),t._v(" "),a("h2",{attrs:{id:"_6、-okhttp空闲连接如何清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、-okhttp空闲连接如何清除"}},[t._v("#")]),t._v(" 6、 OKHttp空闲连接如何清除?")]),t._v(" "),a("p",[t._v("在将连接加入连接池时就会启动定时任务有空闲连接的话，如果最长的空闲时间大于5分钟 或 空闲数 大于5，就移除关闭这个最长空闲连接；如果 空闲数 不大于5 且 最长的空闲时间不大于5分钟，就返回到5分钟的剩余时间，然后等待这个时间再来清理。没有空闲连接就等5分钟后再尝试清理。没有连接不清理。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wyba/image_store/blog/03087bf40ad162d9db66f667f637dde58b13cd37.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_7、okhttp有哪些优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、okhttp有哪些优点"}},[t._v("#")]),t._v(" 7、OKHttp有哪些优点?")]),t._v(" "),a("p",[t._v("使用简单，在设计时使用了外观模式，将整个系统的复杂性给隐藏起来，将子系统接口通过一个客户端 OkHttpClient 统一暴露出来。")]),t._v(" "),a("p",[t._v("扩展性强，可以通过自定义应用拦截器与网络拦截器，完成用户各种自定义的需求")]),t._v(" "),a("p",[t._v("功能强大，支持 Spdy、Http1.X、Http2、以及 WebSocket 等多种协议")]),t._v(" "),a("p",[t._v("通过连接池复用底层 TCP(Socket)，减少请求延时")]),t._v(" "),a("p",[t._v("无缝的支持 GZIP 减少数据流量")]),t._v(" "),a("p",[t._v("支持数据缓存,减少重复的网络请求")]),t._v(" "),a("p",[t._v("支持请求失败自动重试主机的其他 ip，自动重定向")]),t._v(" "),a("h2",{attrs:{id:"_8、okhttp框架中用到了哪些设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、okhttp框架中用到了哪些设计模式"}},[t._v("#")]),t._v(" 8、OKHttp框架中用到了哪些设计模式?")]),t._v(" "),a("p",[t._v("构建者模式：OkHttpClient 与 Request 的构建都用到了构建者模式")]),t._v(" "),a("p",[t._v("外观模式：OkHttp使用了外观模式,将整个系统的复杂性给隐藏起来，将子系统接口通过一个客户端 OkHttpClient 统一暴露出来。")]),t._v(" "),a("p",[t._v("责任链模式: OKHttp 的核心就是责任链模式，通过5个默认拦截器构成的责任链完成请求的配置")]),t._v(" "),a("p",[t._v("享元模式: 享元模式的核心即池中复用, OKHttp 复用 TCP 连接时用到了连接池，同时在异步请求中也用到了线程池")])])}),[],!1,null,null,null);e.default=p.exports}}]);